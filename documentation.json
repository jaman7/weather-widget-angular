{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-9fc95a84683f17897f98c3a85f5e5b58419b21c9700d63de34945ad591990f390566d503cb4b1f1a7842df76cb8987f2b3a8ffb69d5707447d5cd5d7c3820f68",
            "file": "src/app/core/core.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, createFeatureSelector, MetaReducer } from '@ngrx/store';\r\nimport { environment as env } from '@env/environment';\r\nimport { debugReducer, initStateFromLocalStorage } from '@app/core/meta-reducers/init-state-storage.reducer';\r\nimport { routerReducer, RouterReducerState, SerializedRouterStateSnapshot } from '@ngrx/router-store';\r\nimport { languageReducer } from './language/store';\r\nimport { LanguageType } from './language/language.models';\r\n\r\nexport interface AppState {\r\n  language: LanguageType;\r\n  router: RouterReducerState<SerializedRouterStateSnapshot>;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<AppState> = {\r\n  language: languageReducer,\r\n  router: routerReducer,\r\n};\r\n\r\nexport const metaReducers: MetaReducer<AppState>[] = [initStateFromLocalStorage];\r\n\r\nif (!env.production) metaReducers.unshift(debugReducer);\r\n\r\nexport const selectLanguageState = createFeatureSelector<LanguageType>('language');\r\n\r\nexport const selectRouterState = createFeatureSelector<RouterReducerState<SerializedRouterStateSnapshot>>('router');\r\n\r\nexport const APP_PREFIX = 'test-APP';\r\n",
            "properties": [
                {
                    "name": "language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterReducerState<SerializedRouterStateSnapshot>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IButton",
            "id": "interface-IButton-ba408b532662a4e47ddec3cbfb01a305368474f9142dd7300b5d7fc0c97c10e764ccb786ce447b69ada017c43c86249e2644014a99f45d4a327c52ca57093bb3",
            "file": "src/app/components/commons/button/button.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IButton {\r\n  onAction?: () => void;\r\n  id?: string;\r\n  name?: string;\r\n  className?: string;\r\n  customClass?: string;\r\n  tooltipTitle?: string;\r\n  tooltipClassName?: string;\r\n  isRound?: boolean;\r\n  icon?: string;\r\n  [name: string]: string | number | boolean | any;\r\n  disabled?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isRound",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "onAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tooltipClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "tooltipTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-ba408b532662a4e47ddec3cbfb01a305368474f9142dd7300b5d7fc0c97c10e764ccb786ce447b69ada017c43c86249e2644014a99f45d4a327c52ca57093bb3",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string | number | boolean | any",
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICoord",
            "id": "interface-ICoord-86d180ef2a12f734f94da6fc10b47b310cb4fc62f4964d4d438690650ed5d3d31270afdbdb95131cf96a68b377335af13d13200c330c78e9e104a2f028981753",
            "file": "src/app/components/content/home/home.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICoord {\r\n  lon?: number;\r\n  lat?: number;\r\n}\r\n\r\nexport interface IWeather {\r\n  id?: number;\r\n  main?: string;\r\n  description?: string;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IWeatherMain {\r\n  temp?: number;\r\n  feels_like?: number;\r\n  temp_min?: number;\r\n  temp_max?: number;\r\n  pressure?: number;\r\n  humidity?: number;\r\n}\r\n\r\nexport interface IWeatherWind {\r\n  speed?: number;\r\n  deg?: number;\r\n}\r\n\r\nexport interface IWeatherSys {\r\n  type?: number;\r\n  id?: number;\r\n  country?: string;\r\n  sunrise?: number;\r\n  sunset?: number;\r\n}\r\n\r\nexport interface IWeatherCity {\r\n  id?: number;\r\n  name?: string;\r\n  country?: string;\r\n  coord?: ICoord;\r\n}\r\n\r\nexport interface IWeatherClouds {\r\n  all?: number;\r\n}\r\n\r\nexport interface IForecast {\r\n  dt?: number;\r\n  main?: IWeatherMain;\r\n  weather?: IWeather[];\r\n  clouds?: IWeatherClouds;\r\n  wind?: IWeatherWind;\r\n  visibility?: number;\r\n  pop?: number;\r\n  dt_txt?: string;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  coord?: ICoord;\r\n  weather?: IWeather[];\r\n  base?: string;\r\n  main?: IWeatherMain;\r\n  visibility?: number;\r\n  wind?: IWeatherWind;\r\n  clouds?: IWeatherClouds;\r\n  dt?: number;\r\n  sys?: IWeatherSys;\r\n  timezone?: number;\r\n  id?: number;\r\n  name?: string;\r\n  cod?: number;\r\n  city?: IWeatherCity;\r\n  sunrise?: string;\r\n  sunset?: string;\r\n  forecast?: IForecast[];\r\n}\r\n",
            "properties": [
                {
                    "name": "lat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "lon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDataDisplay",
            "id": "interface-IDataDisplay-5e0a856d0ae3fd7c182fe12a6c4ecf635397f0cd60b12dd0574adf34f723effca7534fe56f31c0c84e736950eaf14387fcd960bfdcd6abf1ecd8e681075d6a7b",
            "file": "src/app/components/commons/map/components/maps-popup/maps-popup.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\r\nimport { BehaviorSubject, of, Observable } from 'rxjs';\r\nimport { catchError, debounceTime, distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport Map from 'ol/Map';\r\nimport Overlay from 'ol/Overlay';\r\nimport { toLonLat } from 'ol/proj';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { Feature } from 'ol';\r\nimport { Point } from 'ol/geom';\r\nimport Style from 'ol/style/Style';\r\nimport Icon from 'ol/style/Icon';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { WeatherPopupService } from './maps-popup.service';\r\n\r\nexport interface IDataDisplay {\r\n  label?: string;\r\n  value?: string | number | null;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  [name: string]: any;\r\n}\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-maps-popup',\r\n  templateUrl: './maps-popup.component.html',\r\n  styleUrl: './maps-popup.component.scss',\r\n})\r\nexport class MapPopupComponent extends WeatherPopupService implements AfterViewInit, OnDestroy {\r\n  @ViewChild('popup') popupEl: ElementRef;\r\n\r\n  @Input() mapView: Map;\r\n\r\n  private overlay: Overlay;\r\n\r\n  private markerLayer: VectorLayer<VectorSource>;\r\n\r\n  private currentMarker: Feature;\r\n\r\n  private coordinatesSubject = new BehaviorSubject<number[]>([]);\r\n\r\n  details$: Observable<IDataDisplay[]> = this.coordinatesSubject.pipe(\r\n    debounceTime(300),\r\n    distinctUntilChanged((prev, curr) => prev[0] === curr[0] && prev[1] === curr[1]),\r\n    switchMap(([lon, lat]) =>\r\n      this.getWeatherData(lat, lon).pipe(\r\n        map(data => (data ? this.mapToDetails(data) : [])),\r\n        catchError(() => of([{ label: 'Data unavailable', value: '' }]))\r\n      )\r\n    ),\r\n    untilDestroyed(this)\r\n  );\r\n\r\n  ngAfterViewInit(): void {\r\n    this.overlay = new Overlay({\r\n      element: this.popupEl.nativeElement,\r\n      offset: [0, -13],\r\n    });\r\n    this.markerLayer = new VectorLayer({\r\n      source: new VectorSource(),\r\n    });\r\n\r\n    this.mapView.addOverlay(this.overlay);\r\n    this.mapView.addLayer(this.markerLayer);\r\n    this.setupPopup();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.overlay) this.mapView.removeOverlay(this.overlay);\r\n    if (this.markerLayer) this.mapView.removeLayer(this.markerLayer);\r\n  }\r\n\r\n  setupPopup(): void {\r\n    this.mapView.on('singleclick', event => {\r\n      const { coordinate } = event;\r\n      const [lon, lat] = toLonLat(coordinate);\r\n      this.coordinatesSubject.next([lon, lat]);\r\n      this.addOrUpdateMarker(coordinate);\r\n      this.overlay.setPosition(coordinate);\r\n      const popupRect = this.popupEl.nativeElement.getBoundingClientRect();\r\n      this.overlay.setOffset([-popupRect.width / 2, -popupRect.height - 30]);\r\n    });\r\n  }\r\n\r\n  private mapToDetails(data: IWeatherData): IDataDisplay[] {\r\n    const { wind, clouds, main } = data || {};\r\n    return [\r\n      { label: 'Temperature:', value: `${Math.floor((main?.temp as number) ?? 0)}°C` },\r\n      { label: 'Wind:', value: `${Math.floor((wind?.speed as number) ?? 0)}m/s` },\r\n      { label: 'Cloud cover:', value: `${(clouds?.all as number) ?? 0}%` },\r\n      { label: 'Pressure:', value: `${(main?.pressure as number) ?? 0}hPa` },\r\n    ];\r\n  }\r\n\r\n  private addOrUpdateMarker(coordinate: number[]): void {\r\n    if (this.currentMarker) {\r\n      const currentCoord = (this.currentMarker.getGeometry() as Point).getCoordinates();\r\n      if (currentCoord[0] === coordinate[0] && currentCoord[1] === coordinate[1]) return;\r\n      this.markerLayer.getSource().removeFeature(this.currentMarker);\r\n    }\r\n\r\n    const marker = new Feature({\r\n      geometry: new Point(coordinate),\r\n    });\r\n\r\n    marker.setStyle(\r\n      new Style({\r\n        image: new Icon({\r\n          anchor: [0.5, 1],\r\n          src: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',\r\n          scale: 0.05,\r\n        }),\r\n      })\r\n    );\r\n\r\n    this.markerLayer.getSource().addFeature(marker);\r\n    this.currentMarker = marker;\r\n  }\r\n\r\n  closePopup(): void {\r\n    this.overlay.setPosition(undefined);\r\n    if (this.currentMarker) {\r\n      this.markerLayer.getSource().removeFeature(this.currentMarker);\r\n      this.currentMarker = null;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IForecast",
            "id": "interface-IForecast-86d180ef2a12f734f94da6fc10b47b310cb4fc62f4964d4d438690650ed5d3d31270afdbdb95131cf96a68b377335af13d13200c330c78e9e104a2f028981753",
            "file": "src/app/components/content/home/home.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICoord {\r\n  lon?: number;\r\n  lat?: number;\r\n}\r\n\r\nexport interface IWeather {\r\n  id?: number;\r\n  main?: string;\r\n  description?: string;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IWeatherMain {\r\n  temp?: number;\r\n  feels_like?: number;\r\n  temp_min?: number;\r\n  temp_max?: number;\r\n  pressure?: number;\r\n  humidity?: number;\r\n}\r\n\r\nexport interface IWeatherWind {\r\n  speed?: number;\r\n  deg?: number;\r\n}\r\n\r\nexport interface IWeatherSys {\r\n  type?: number;\r\n  id?: number;\r\n  country?: string;\r\n  sunrise?: number;\r\n  sunset?: number;\r\n}\r\n\r\nexport interface IWeatherCity {\r\n  id?: number;\r\n  name?: string;\r\n  country?: string;\r\n  coord?: ICoord;\r\n}\r\n\r\nexport interface IWeatherClouds {\r\n  all?: number;\r\n}\r\n\r\nexport interface IForecast {\r\n  dt?: number;\r\n  main?: IWeatherMain;\r\n  weather?: IWeather[];\r\n  clouds?: IWeatherClouds;\r\n  wind?: IWeatherWind;\r\n  visibility?: number;\r\n  pop?: number;\r\n  dt_txt?: string;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  coord?: ICoord;\r\n  weather?: IWeather[];\r\n  base?: string;\r\n  main?: IWeatherMain;\r\n  visibility?: number;\r\n  wind?: IWeatherWind;\r\n  clouds?: IWeatherClouds;\r\n  dt?: number;\r\n  sys?: IWeatherSys;\r\n  timezone?: number;\r\n  id?: number;\r\n  name?: string;\r\n  cod?: number;\r\n  city?: IWeatherCity;\r\n  sunrise?: string;\r\n  sunset?: string;\r\n  forecast?: IForecast[];\r\n}\r\n",
            "properties": [
                {
                    "name": "clouds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeatherClouds",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "dt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "dt_txt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "main",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeatherMain",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "pop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "weather",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeather[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "wind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeatherWind",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ILegend",
            "id": "interface-ILegend-d97f8658b40ddb66a98220848cb52e84645543871828ddd59389a9b3e93ff68eecf2ba9a06f68993a4a6fa3ffebc9117fb9454ee9f18be9602672b74ce9b1b69",
            "file": "src/app/components/commons/map/components/map-legend/map-legend.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILegend {\r\n  title: string;\r\n  gradient: string;\r\n  dividers: number[];\r\n}\r\n",
            "properties": [
                {
                    "name": "dividers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "gradient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IMenuConfig",
            "id": "interface-IMenuConfig-eee5fec54455b3a58e75d9c893b7738723758b86fd1e7a5f623a1fb9d2980dc81a925410e87f2b80b28c7386cc6cbfff8cc9487a01c18a3b7a826c200d4cecaf",
            "file": "src/app/components/header/menu.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuConfig {\r\n  id?: string;\r\n  name?: string;\r\n  title?: string;\r\n  visible?: boolean;\r\n  children?: IMenuConfig[];\r\n  customLink?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuConfig[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "customLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IParams",
            "id": "interface-IParams-5215da531f5ae417b22c85cf24fda41573b11c375d0c275ce151d96e4b342fe79fd259f73962baf4b0d8728382f8dfead77ca6b12686107b8431223efecb9548",
            "file": "src/app/core/http/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpHeaders } from '@angular/common/http';\r\n\r\nexport type HttpObserveType = 'body' | 'events' | 'response';\r\n\r\nexport interface IParams {\r\n  [param: string]: number | number[] | string | string[] | boolean | boolean[];\r\n}\r\n\r\nexport class HttpOptions {\r\n  headers?: HttpHeaders | { [header: string]: string | string[] };\r\n\r\n  observe?: 'body';\r\n\r\n  params?: IParams;\r\n\r\n  reportProgress?: boolean;\r\n\r\n  responseType?: 'json';\r\n\r\n  withCredentials?: boolean;\r\n}\r\n\r\nexport class HttpRequestOptions {\r\n  body?: any;\r\n\r\n  headers?: HttpHeaders | { [header: string]: string | string[] };\r\n\r\n  params?: {\r\n    [param: string]: string | string[];\r\n  };\r\n\r\n  observe?: HttpObserveType;\r\n\r\n  reportProgress?: boolean;\r\n\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n\r\n  withCredentials?: boolean;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-5215da531f5ae417b22c85cf24fda41573b11c375d0c275ce151d96e4b342fe79fd259f73962baf4b0d8728382f8dfead77ca6b12686107b8431223efecb9548",
                    "args": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number | [] | string | [] | boolean | []",
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISearchData",
            "id": "interface-ISearchData-1837ea9ececc145b812d6e81641eb299ca49160725ae076cf421a59cbcbb1d596894ea6279e45822437655a9e57002079387904ffd58ba6caed45d41a73309a9",
            "file": "src/app/components/commons/map/components/map-search/map-search.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ISearchData {\r\n  city?: string;\r\n  latitude?: number;\r\n  longitude?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "latitude",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "longitude",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISidebarConfig",
            "id": "interface-ISidebarConfig-7cb1d3f0e7b06c732fe36761ba7c2eba59ba92c849a84091a766ea62a1647676ed48f40ef4d38c01eedc8cda877806371c9ccb2e0e2e714d1260f56326111e2a",
            "file": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import TileLayer from 'ol/layer/Tile';\r\nimport { OSM } from 'ol/source';\r\n\r\nexport type BtnTypes = 'button' | 'radio' | 'radio-item';\r\nexport type CheckboxTypes = 'weather' | 'tile';\r\nexport type TypesTooltipPlacement =\r\n  | 'top'\r\n  | 'left'\r\n  | 'right'\r\n  | 'bottom'\r\n  | 'topLeft'\r\n  | 'topRight'\r\n  | 'bottomLeft'\r\n  | 'bottomRight'\r\n  | 'leftTop'\r\n  | 'leftBottom'\r\n  | 'rightTop'\r\n  | 'rightBottom'\r\n  | Array<string>;\r\n\r\nexport interface ISidebarConfig {\r\n  id?: number | string;\r\n  level?: number;\r\n  name?: string;\r\n  title?: string;\r\n  icon?: string;\r\n  tooltipTitle?: string;\r\n  tooltipPlacement?: TypesTooltipPlacement;\r\n  additionalClass?: string;\r\n  iconType?: string;\r\n  type?: BtnTypes;\r\n  typeCheckbox?: CheckboxTypes;\r\n  source?: OSM;\r\n  tile?: TileLayer;\r\n  checked?: boolean;\r\n  value?: number;\r\n  children?: ISidebarConfig[];\r\n}\r\n",
            "properties": [
                {
                    "name": "additionalClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISidebarConfig[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "iconType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OSM",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "tile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TileLayer",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "tooltipPlacement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypesTooltipPlacement",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "tooltipTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BtnTypes",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "typeCheckbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckboxTypes",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Item",
            "id": "interface-Item-4a51b59ec63a6d3f6c11546f119c4891e847249e11c8ce3f5e5bb871796bd8b4e611f40c906a63bf8616d2524f9c0ff29ff95e435f607fb077185e9d0cb1a84c",
            "file": "src/app/shared/directives/ngFor-trackByIndex.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgForOf } from '@angular/common';\r\nimport { Directive, Host } from '@angular/core';\r\n\r\nexport interface Item {\r\n  id?: number | string;\r\n  [key: string]: any | any[];\r\n}\r\n\r\n@Directive({\r\n  selector: '[ngForTrackByIndex]',\r\n})\r\nexport class NgForTrackByIndexDirective<T extends Item> {\r\n  constructor(@Host() private ngFor: NgForOf<T>) {\r\n    this.ngFor.ngForTrackBy = (index: number, item: T): number | string | undefined => item.id;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-4a51b59ec63a6d3f6c11546f119c4891e847249e11c8ce3f5e5bb871796bd8b4e611f40c906a63bf8616d2524f9c0ff29ff95e435f607fb077185e9d0cb1a84c",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any | []",
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "IWeather",
            "id": "interface-IWeather-86d180ef2a12f734f94da6fc10b47b310cb4fc62f4964d4d438690650ed5d3d31270afdbdb95131cf96a68b377335af13d13200c330c78e9e104a2f028981753",
            "file": "src/app/components/content/home/home.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICoord {\r\n  lon?: number;\r\n  lat?: number;\r\n}\r\n\r\nexport interface IWeather {\r\n  id?: number;\r\n  main?: string;\r\n  description?: string;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IWeatherMain {\r\n  temp?: number;\r\n  feels_like?: number;\r\n  temp_min?: number;\r\n  temp_max?: number;\r\n  pressure?: number;\r\n  humidity?: number;\r\n}\r\n\r\nexport interface IWeatherWind {\r\n  speed?: number;\r\n  deg?: number;\r\n}\r\n\r\nexport interface IWeatherSys {\r\n  type?: number;\r\n  id?: number;\r\n  country?: string;\r\n  sunrise?: number;\r\n  sunset?: number;\r\n}\r\n\r\nexport interface IWeatherCity {\r\n  id?: number;\r\n  name?: string;\r\n  country?: string;\r\n  coord?: ICoord;\r\n}\r\n\r\nexport interface IWeatherClouds {\r\n  all?: number;\r\n}\r\n\r\nexport interface IForecast {\r\n  dt?: number;\r\n  main?: IWeatherMain;\r\n  weather?: IWeather[];\r\n  clouds?: IWeatherClouds;\r\n  wind?: IWeatherWind;\r\n  visibility?: number;\r\n  pop?: number;\r\n  dt_txt?: string;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  coord?: ICoord;\r\n  weather?: IWeather[];\r\n  base?: string;\r\n  main?: IWeatherMain;\r\n  visibility?: number;\r\n  wind?: IWeatherWind;\r\n  clouds?: IWeatherClouds;\r\n  dt?: number;\r\n  sys?: IWeatherSys;\r\n  timezone?: number;\r\n  id?: number;\r\n  name?: string;\r\n  cod?: number;\r\n  city?: IWeatherCity;\r\n  sunrise?: string;\r\n  sunset?: string;\r\n  forecast?: IForecast[];\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "main",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IWeatherCity",
            "id": "interface-IWeatherCity-86d180ef2a12f734f94da6fc10b47b310cb4fc62f4964d4d438690650ed5d3d31270afdbdb95131cf96a68b377335af13d13200c330c78e9e104a2f028981753",
            "file": "src/app/components/content/home/home.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICoord {\r\n  lon?: number;\r\n  lat?: number;\r\n}\r\n\r\nexport interface IWeather {\r\n  id?: number;\r\n  main?: string;\r\n  description?: string;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IWeatherMain {\r\n  temp?: number;\r\n  feels_like?: number;\r\n  temp_min?: number;\r\n  temp_max?: number;\r\n  pressure?: number;\r\n  humidity?: number;\r\n}\r\n\r\nexport interface IWeatherWind {\r\n  speed?: number;\r\n  deg?: number;\r\n}\r\n\r\nexport interface IWeatherSys {\r\n  type?: number;\r\n  id?: number;\r\n  country?: string;\r\n  sunrise?: number;\r\n  sunset?: number;\r\n}\r\n\r\nexport interface IWeatherCity {\r\n  id?: number;\r\n  name?: string;\r\n  country?: string;\r\n  coord?: ICoord;\r\n}\r\n\r\nexport interface IWeatherClouds {\r\n  all?: number;\r\n}\r\n\r\nexport interface IForecast {\r\n  dt?: number;\r\n  main?: IWeatherMain;\r\n  weather?: IWeather[];\r\n  clouds?: IWeatherClouds;\r\n  wind?: IWeatherWind;\r\n  visibility?: number;\r\n  pop?: number;\r\n  dt_txt?: string;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  coord?: ICoord;\r\n  weather?: IWeather[];\r\n  base?: string;\r\n  main?: IWeatherMain;\r\n  visibility?: number;\r\n  wind?: IWeatherWind;\r\n  clouds?: IWeatherClouds;\r\n  dt?: number;\r\n  sys?: IWeatherSys;\r\n  timezone?: number;\r\n  id?: number;\r\n  name?: string;\r\n  cod?: number;\r\n  city?: IWeatherCity;\r\n  sunrise?: string;\r\n  sunset?: string;\r\n  forecast?: IForecast[];\r\n}\r\n",
            "properties": [
                {
                    "name": "coord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoord",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IWeatherClouds",
            "id": "interface-IWeatherClouds-86d180ef2a12f734f94da6fc10b47b310cb4fc62f4964d4d438690650ed5d3d31270afdbdb95131cf96a68b377335af13d13200c330c78e9e104a2f028981753",
            "file": "src/app/components/content/home/home.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICoord {\r\n  lon?: number;\r\n  lat?: number;\r\n}\r\n\r\nexport interface IWeather {\r\n  id?: number;\r\n  main?: string;\r\n  description?: string;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IWeatherMain {\r\n  temp?: number;\r\n  feels_like?: number;\r\n  temp_min?: number;\r\n  temp_max?: number;\r\n  pressure?: number;\r\n  humidity?: number;\r\n}\r\n\r\nexport interface IWeatherWind {\r\n  speed?: number;\r\n  deg?: number;\r\n}\r\n\r\nexport interface IWeatherSys {\r\n  type?: number;\r\n  id?: number;\r\n  country?: string;\r\n  sunrise?: number;\r\n  sunset?: number;\r\n}\r\n\r\nexport interface IWeatherCity {\r\n  id?: number;\r\n  name?: string;\r\n  country?: string;\r\n  coord?: ICoord;\r\n}\r\n\r\nexport interface IWeatherClouds {\r\n  all?: number;\r\n}\r\n\r\nexport interface IForecast {\r\n  dt?: number;\r\n  main?: IWeatherMain;\r\n  weather?: IWeather[];\r\n  clouds?: IWeatherClouds;\r\n  wind?: IWeatherWind;\r\n  visibility?: number;\r\n  pop?: number;\r\n  dt_txt?: string;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  coord?: ICoord;\r\n  weather?: IWeather[];\r\n  base?: string;\r\n  main?: IWeatherMain;\r\n  visibility?: number;\r\n  wind?: IWeatherWind;\r\n  clouds?: IWeatherClouds;\r\n  dt?: number;\r\n  sys?: IWeatherSys;\r\n  timezone?: number;\r\n  id?: number;\r\n  name?: string;\r\n  cod?: number;\r\n  city?: IWeatherCity;\r\n  sunrise?: string;\r\n  sunset?: string;\r\n  forecast?: IForecast[];\r\n}\r\n",
            "properties": [
                {
                    "name": "all",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IWeatherData",
            "id": "interface-IWeatherData-a9603e7df3d416754736c47d82d2c2b57f7c5937b2e6d33cd1c3918758b7e05dbef2e5574b98c86f920b4967b2d5a766d84ebc67abf50b7cac592aa50d43fa86",
            "file": "src/app/components/commons/weather-widget/weather-widget.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IWeatherData {\r\n  id?: number;\r\n  city?: string;\r\n  temp?: number;\r\n  description?: string;\r\n  icon?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "temp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IWeatherData",
            "id": "interface-IWeatherData-86d180ef2a12f734f94da6fc10b47b310cb4fc62f4964d4d438690650ed5d3d31270afdbdb95131cf96a68b377335af13d13200c330c78e9e104a2f028981753-1",
            "file": "src/app/components/content/home/home.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICoord {\r\n  lon?: number;\r\n  lat?: number;\r\n}\r\n\r\nexport interface IWeather {\r\n  id?: number;\r\n  main?: string;\r\n  description?: string;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IWeatherMain {\r\n  temp?: number;\r\n  feels_like?: number;\r\n  temp_min?: number;\r\n  temp_max?: number;\r\n  pressure?: number;\r\n  humidity?: number;\r\n}\r\n\r\nexport interface IWeatherWind {\r\n  speed?: number;\r\n  deg?: number;\r\n}\r\n\r\nexport interface IWeatherSys {\r\n  type?: number;\r\n  id?: number;\r\n  country?: string;\r\n  sunrise?: number;\r\n  sunset?: number;\r\n}\r\n\r\nexport interface IWeatherCity {\r\n  id?: number;\r\n  name?: string;\r\n  country?: string;\r\n  coord?: ICoord;\r\n}\r\n\r\nexport interface IWeatherClouds {\r\n  all?: number;\r\n}\r\n\r\nexport interface IForecast {\r\n  dt?: number;\r\n  main?: IWeatherMain;\r\n  weather?: IWeather[];\r\n  clouds?: IWeatherClouds;\r\n  wind?: IWeatherWind;\r\n  visibility?: number;\r\n  pop?: number;\r\n  dt_txt?: string;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  coord?: ICoord;\r\n  weather?: IWeather[];\r\n  base?: string;\r\n  main?: IWeatherMain;\r\n  visibility?: number;\r\n  wind?: IWeatherWind;\r\n  clouds?: IWeatherClouds;\r\n  dt?: number;\r\n  sys?: IWeatherSys;\r\n  timezone?: number;\r\n  id?: number;\r\n  name?: string;\r\n  cod?: number;\r\n  city?: IWeatherCity;\r\n  sunrise?: string;\r\n  sunset?: string;\r\n  forecast?: IForecast[];\r\n}\r\n",
            "properties": [
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeatherCity",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "clouds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeatherClouds",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "cod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "coord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoord",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "dt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "forecast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IForecast[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "main",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeatherMain",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "sunrise",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "sunset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "sys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeatherSys",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "timezone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "weather",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeather[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "wind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeatherWind",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 63
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IWeatherData-1"
        },
        {
            "name": "IWeatherData",
            "id": "interface-IWeatherData-5e0a856d0ae3fd7c182fe12a6c4ecf635397f0cd60b12dd0574adf34f723effca7534fe56f31c0c84e736950eaf14387fcd960bfdcd6abf1ecd8e681075d6a7b-2",
            "file": "src/app/components/commons/map/components/maps-popup/maps-popup.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\r\nimport { BehaviorSubject, of, Observable } from 'rxjs';\r\nimport { catchError, debounceTime, distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport Map from 'ol/Map';\r\nimport Overlay from 'ol/Overlay';\r\nimport { toLonLat } from 'ol/proj';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { Feature } from 'ol';\r\nimport { Point } from 'ol/geom';\r\nimport Style from 'ol/style/Style';\r\nimport Icon from 'ol/style/Icon';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { WeatherPopupService } from './maps-popup.service';\r\n\r\nexport interface IDataDisplay {\r\n  label?: string;\r\n  value?: string | number | null;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  [name: string]: any;\r\n}\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-maps-popup',\r\n  templateUrl: './maps-popup.component.html',\r\n  styleUrl: './maps-popup.component.scss',\r\n})\r\nexport class MapPopupComponent extends WeatherPopupService implements AfterViewInit, OnDestroy {\r\n  @ViewChild('popup') popupEl: ElementRef;\r\n\r\n  @Input() mapView: Map;\r\n\r\n  private overlay: Overlay;\r\n\r\n  private markerLayer: VectorLayer<VectorSource>;\r\n\r\n  private currentMarker: Feature;\r\n\r\n  private coordinatesSubject = new BehaviorSubject<number[]>([]);\r\n\r\n  details$: Observable<IDataDisplay[]> = this.coordinatesSubject.pipe(\r\n    debounceTime(300),\r\n    distinctUntilChanged((prev, curr) => prev[0] === curr[0] && prev[1] === curr[1]),\r\n    switchMap(([lon, lat]) =>\r\n      this.getWeatherData(lat, lon).pipe(\r\n        map(data => (data ? this.mapToDetails(data) : [])),\r\n        catchError(() => of([{ label: 'Data unavailable', value: '' }]))\r\n      )\r\n    ),\r\n    untilDestroyed(this)\r\n  );\r\n\r\n  ngAfterViewInit(): void {\r\n    this.overlay = new Overlay({\r\n      element: this.popupEl.nativeElement,\r\n      offset: [0, -13],\r\n    });\r\n    this.markerLayer = new VectorLayer({\r\n      source: new VectorSource(),\r\n    });\r\n\r\n    this.mapView.addOverlay(this.overlay);\r\n    this.mapView.addLayer(this.markerLayer);\r\n    this.setupPopup();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.overlay) this.mapView.removeOverlay(this.overlay);\r\n    if (this.markerLayer) this.mapView.removeLayer(this.markerLayer);\r\n  }\r\n\r\n  setupPopup(): void {\r\n    this.mapView.on('singleclick', event => {\r\n      const { coordinate } = event;\r\n      const [lon, lat] = toLonLat(coordinate);\r\n      this.coordinatesSubject.next([lon, lat]);\r\n      this.addOrUpdateMarker(coordinate);\r\n      this.overlay.setPosition(coordinate);\r\n      const popupRect = this.popupEl.nativeElement.getBoundingClientRect();\r\n      this.overlay.setOffset([-popupRect.width / 2, -popupRect.height - 30]);\r\n    });\r\n  }\r\n\r\n  private mapToDetails(data: IWeatherData): IDataDisplay[] {\r\n    const { wind, clouds, main } = data || {};\r\n    return [\r\n      { label: 'Temperature:', value: `${Math.floor((main?.temp as number) ?? 0)}°C` },\r\n      { label: 'Wind:', value: `${Math.floor((wind?.speed as number) ?? 0)}m/s` },\r\n      { label: 'Cloud cover:', value: `${(clouds?.all as number) ?? 0}%` },\r\n      { label: 'Pressure:', value: `${(main?.pressure as number) ?? 0}hPa` },\r\n    ];\r\n  }\r\n\r\n  private addOrUpdateMarker(coordinate: number[]): void {\r\n    if (this.currentMarker) {\r\n      const currentCoord = (this.currentMarker.getGeometry() as Point).getCoordinates();\r\n      if (currentCoord[0] === coordinate[0] && currentCoord[1] === coordinate[1]) return;\r\n      this.markerLayer.getSource().removeFeature(this.currentMarker);\r\n    }\r\n\r\n    const marker = new Feature({\r\n      geometry: new Point(coordinate),\r\n    });\r\n\r\n    marker.setStyle(\r\n      new Style({\r\n        image: new Icon({\r\n          anchor: [0.5, 1],\r\n          src: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',\r\n          scale: 0.05,\r\n        }),\r\n      })\r\n    );\r\n\r\n    this.markerLayer.getSource().addFeature(marker);\r\n    this.currentMarker = marker;\r\n  }\r\n\r\n  closePopup(): void {\r\n    this.overlay.setPosition(undefined);\r\n    if (this.currentMarker) {\r\n      this.markerLayer.getSource().removeFeature(this.currentMarker);\r\n      this.currentMarker = null;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-5e0a856d0ae3fd7c182fe12a6c4ecf635397f0cd60b12dd0574adf34f723effca7534fe56f31c0c84e736950eaf14387fcd960bfdcd6abf1ecd8e681075d6a7b",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "IWeatherData-2"
        },
        {
            "name": "IWeatherMain",
            "id": "interface-IWeatherMain-86d180ef2a12f734f94da6fc10b47b310cb4fc62f4964d4d438690650ed5d3d31270afdbdb95131cf96a68b377335af13d13200c330c78e9e104a2f028981753",
            "file": "src/app/components/content/home/home.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICoord {\r\n  lon?: number;\r\n  lat?: number;\r\n}\r\n\r\nexport interface IWeather {\r\n  id?: number;\r\n  main?: string;\r\n  description?: string;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IWeatherMain {\r\n  temp?: number;\r\n  feels_like?: number;\r\n  temp_min?: number;\r\n  temp_max?: number;\r\n  pressure?: number;\r\n  humidity?: number;\r\n}\r\n\r\nexport interface IWeatherWind {\r\n  speed?: number;\r\n  deg?: number;\r\n}\r\n\r\nexport interface IWeatherSys {\r\n  type?: number;\r\n  id?: number;\r\n  country?: string;\r\n  sunrise?: number;\r\n  sunset?: number;\r\n}\r\n\r\nexport interface IWeatherCity {\r\n  id?: number;\r\n  name?: string;\r\n  country?: string;\r\n  coord?: ICoord;\r\n}\r\n\r\nexport interface IWeatherClouds {\r\n  all?: number;\r\n}\r\n\r\nexport interface IForecast {\r\n  dt?: number;\r\n  main?: IWeatherMain;\r\n  weather?: IWeather[];\r\n  clouds?: IWeatherClouds;\r\n  wind?: IWeatherWind;\r\n  visibility?: number;\r\n  pop?: number;\r\n  dt_txt?: string;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  coord?: ICoord;\r\n  weather?: IWeather[];\r\n  base?: string;\r\n  main?: IWeatherMain;\r\n  visibility?: number;\r\n  wind?: IWeatherWind;\r\n  clouds?: IWeatherClouds;\r\n  dt?: number;\r\n  sys?: IWeatherSys;\r\n  timezone?: number;\r\n  id?: number;\r\n  name?: string;\r\n  cod?: number;\r\n  city?: IWeatherCity;\r\n  sunrise?: string;\r\n  sunset?: string;\r\n  forecast?: IForecast[];\r\n}\r\n",
            "properties": [
                {
                    "name": "feels_like",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "humidity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pressure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "temp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "temp_max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "temp_min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IWeatherSys",
            "id": "interface-IWeatherSys-86d180ef2a12f734f94da6fc10b47b310cb4fc62f4964d4d438690650ed5d3d31270afdbdb95131cf96a68b377335af13d13200c330c78e9e104a2f028981753",
            "file": "src/app/components/content/home/home.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICoord {\r\n  lon?: number;\r\n  lat?: number;\r\n}\r\n\r\nexport interface IWeather {\r\n  id?: number;\r\n  main?: string;\r\n  description?: string;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IWeatherMain {\r\n  temp?: number;\r\n  feels_like?: number;\r\n  temp_min?: number;\r\n  temp_max?: number;\r\n  pressure?: number;\r\n  humidity?: number;\r\n}\r\n\r\nexport interface IWeatherWind {\r\n  speed?: number;\r\n  deg?: number;\r\n}\r\n\r\nexport interface IWeatherSys {\r\n  type?: number;\r\n  id?: number;\r\n  country?: string;\r\n  sunrise?: number;\r\n  sunset?: number;\r\n}\r\n\r\nexport interface IWeatherCity {\r\n  id?: number;\r\n  name?: string;\r\n  country?: string;\r\n  coord?: ICoord;\r\n}\r\n\r\nexport interface IWeatherClouds {\r\n  all?: number;\r\n}\r\n\r\nexport interface IForecast {\r\n  dt?: number;\r\n  main?: IWeatherMain;\r\n  weather?: IWeather[];\r\n  clouds?: IWeatherClouds;\r\n  wind?: IWeatherWind;\r\n  visibility?: number;\r\n  pop?: number;\r\n  dt_txt?: string;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  coord?: ICoord;\r\n  weather?: IWeather[];\r\n  base?: string;\r\n  main?: IWeatherMain;\r\n  visibility?: number;\r\n  wind?: IWeatherWind;\r\n  clouds?: IWeatherClouds;\r\n  dt?: number;\r\n  sys?: IWeatherSys;\r\n  timezone?: number;\r\n  id?: number;\r\n  name?: string;\r\n  cod?: number;\r\n  city?: IWeatherCity;\r\n  sunrise?: string;\r\n  sunset?: string;\r\n  forecast?: IForecast[];\r\n}\r\n",
            "properties": [
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sunrise",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sunset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IWeatherWind",
            "id": "interface-IWeatherWind-86d180ef2a12f734f94da6fc10b47b310cb4fc62f4964d4d438690650ed5d3d31270afdbdb95131cf96a68b377335af13d13200c330c78e9e104a2f028981753",
            "file": "src/app/components/content/home/home.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICoord {\r\n  lon?: number;\r\n  lat?: number;\r\n}\r\n\r\nexport interface IWeather {\r\n  id?: number;\r\n  main?: string;\r\n  description?: string;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IWeatherMain {\r\n  temp?: number;\r\n  feels_like?: number;\r\n  temp_min?: number;\r\n  temp_max?: number;\r\n  pressure?: number;\r\n  humidity?: number;\r\n}\r\n\r\nexport interface IWeatherWind {\r\n  speed?: number;\r\n  deg?: number;\r\n}\r\n\r\nexport interface IWeatherSys {\r\n  type?: number;\r\n  id?: number;\r\n  country?: string;\r\n  sunrise?: number;\r\n  sunset?: number;\r\n}\r\n\r\nexport interface IWeatherCity {\r\n  id?: number;\r\n  name?: string;\r\n  country?: string;\r\n  coord?: ICoord;\r\n}\r\n\r\nexport interface IWeatherClouds {\r\n  all?: number;\r\n}\r\n\r\nexport interface IForecast {\r\n  dt?: number;\r\n  main?: IWeatherMain;\r\n  weather?: IWeather[];\r\n  clouds?: IWeatherClouds;\r\n  wind?: IWeatherWind;\r\n  visibility?: number;\r\n  pop?: number;\r\n  dt_txt?: string;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  coord?: ICoord;\r\n  weather?: IWeather[];\r\n  base?: string;\r\n  main?: IWeatherMain;\r\n  visibility?: number;\r\n  wind?: IWeatherWind;\r\n  clouds?: IWeatherClouds;\r\n  dt?: number;\r\n  sys?: IWeatherSys;\r\n  timezone?: number;\r\n  id?: number;\r\n  name?: string;\r\n  cod?: number;\r\n  city?: IWeatherCity;\r\n  sunrise?: string;\r\n  sunset?: string;\r\n  forecast?: IForecast[];\r\n}\r\n",
            "properties": [
                {
                    "name": "deg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "speed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LanguageState",
            "id": "interface-LanguageState-ca232217ffe5fafb7e11ef9c6e7e2ecb60eb6d112dbe517a3c4515834e75835ea6d62c5899e977d371ee77daef74f1d32b36878ee3b1546290db8786a5055ea9",
            "file": "src/app/core/language/language.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LanguageState {\r\n  key: string;\r\n}\r\n\r\nexport type LanguageType = 'pl' | 'en';\r\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "HomeService",
            "id": "injectable-HomeService-2cf8a5f5f69e3cfc8ace8298b222a00a1273ed1414b6ad37e98ee2edf5e2dbae78875e409321e54b6ea5e4e4bb742da557322b79a4d6659c7652fb2a84bf5c75",
            "file": "src/app/components/content/home/home.service.ts",
            "properties": [
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getForecast",
                    "args": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lon",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lon",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWeather",
                    "args": [
                        {
                            "name": "city",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "city",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "response",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { API_KEY, API_URL } from '@app/components/commons/map/map.constants';\r\nimport { HttpService } from '@app/core';\r\nimport { IParams } from '@app/core/http/http.model';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HomeService extends HttpService {\r\n  getWeather(city: string): Observable<any> {\r\n    const params: IParams = {\r\n      q: city,\r\n      appid: API_KEY,\r\n      units: 'metric',\r\n    };\r\n\r\n    return this.get(`${API_URL}/weather`, { params }, true);\r\n  }\r\n\r\n  getForecast(lat: number, lon: number): Observable<any> {\r\n    const params: IParams = {\r\n      lat,\r\n      lon,\r\n      appid: API_KEY,\r\n      units: 'metric',\r\n    };\r\n\r\n    return this.get(`${API_URL}/forecast`, { params }, true);\r\n  }\r\n}\r\n",
            "extends": [
                "HttpService"
            ],
            "type": "injectable"
        },
        {
            "name": "HttpService",
            "id": "injectable-HttpService-abb460e70d3eda5256fd6406853cc0d03ac2498e3aafd84c6cba67f88e72508d169acb312fc2377bba206bda1643973e122d2984c8b0b19267b0493e05dbf9c0",
            "file": "src/app/core/http/http.service.ts",
            "properties": [
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "response",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { environment as env } from '@env/environment';\r\nimport { toHttpParams } from './http.utils';\r\nimport { HttpOptions, HttpRequestOptions, IParams } from './http.model';\r\n\r\n@Injectable()\r\nexport abstract class HttpService {\r\n  constructor(public http: HttpClient) {}\r\n\r\n  private createUrl(url: string, useFullUrl: boolean): string {\r\n    return useFullUrl ? url : env.SERVER_API_URL + url;\r\n  }\r\n\r\n  protected get<T>(url: string, options: HttpOptions = {}, useFullUrl: boolean = false): Observable<T> {\r\n    const finalUrl = this.createUrl(url, useFullUrl);\r\n    return this.http.get<T>(finalUrl, {\r\n      ...options,\r\n      params: toHttpParams(options.params as IParams),\r\n    });\r\n  }\r\n\r\n  protected post<T>(url: string, data: any, options: HttpOptions = {}, useFullUrl: boolean = false): Observable<T> {\r\n    const finalUrl = this.createUrl(url, useFullUrl);\r\n    return this.http.post<T>(finalUrl, data, {\r\n      ...options,\r\n      params: toHttpParams(options.params as IParams),\r\n    });\r\n  }\r\n\r\n  protected patch<T>(url: string, data: any, options: HttpOptions = {}, useFullUrl: boolean = false): Observable<T> {\r\n    const finalUrl = this.createUrl(url, useFullUrl);\r\n    return this.http.patch<T>(finalUrl, data, {\r\n      ...options,\r\n      params: toHttpParams(options.params as IParams),\r\n    });\r\n  }\r\n\r\n  protected put<T>(url: string, data: any, options: HttpOptions = {}, useFullUrl: boolean = false): Observable<T> {\r\n    const finalUrl = this.createUrl(url, useFullUrl);\r\n    return this.http.put<T>(finalUrl, data, {\r\n      ...options,\r\n      params: toHttpParams(options.params as IParams),\r\n    });\r\n  }\r\n\r\n  protected delete<T>(url: string, options: HttpOptions = {}, useFullUrl: boolean = false): Observable<T> {\r\n    const finalUrl = this.createUrl(url, useFullUrl);\r\n    return this.http.delete<T>(finalUrl, {\r\n      ...options,\r\n      params: toHttpParams(options.params as IParams),\r\n    });\r\n  }\r\n\r\n  protected response(method: string, url: string, options: HttpRequestOptions = {}, useFullUrl: boolean = false): Observable<any> {\r\n    const finalUrl = this.createUrl(url, useFullUrl);\r\n    return this.http.request(method, finalUrl, {\r\n      ...options,\r\n      body: options.body,\r\n      params: toHttpParams(options.params as IParams),\r\n    });\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    console.error('API call error:', error);\r\n    return throwError('An error occurred while communicating with the server.');\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LanguageEffects",
            "id": "injectable-LanguageEffects-2a27d2b83599b1a2424bbce8a804020fc6fc78e82ec7710e35e9715d497466d7d1a962e2ddae3034070bce969eecc32504c575cba0f2d27acfdff55001280e0a",
            "file": "src/app/core/language/store/language.effects.ts",
            "properties": [
                {
                    "name": "changeLanguage$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(LanguageActionTypes.CHANGE_LANGUAGE),\r\n        map(action => {\r\n          localStorage.setItem(`${APP_PREFIX}${'LANGUAGE'}`, JSON.stringify(action.payload));\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { APP_PREFIX } from '@app/core/core.state';\r\nimport { ActionLanguageChange, LanguageActionTypes } from './language.actions';\r\n\r\n@Injectable()\r\nexport class LanguageEffects {\r\n  constructor(private actions$: Actions<ActionLanguageChange>) {}\r\n\r\n  changeLanguage$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(LanguageActionTypes.CHANGE_LANGUAGE),\r\n        map(action => {\r\n          localStorage.setItem(`${APP_PREFIX}${'LANGUAGE'}`, JSON.stringify(action.payload));\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions<ActionLanguageChange>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions<ActionLanguageChange>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LanguageService",
            "id": "injectable-LanguageService-6561876dffe3bbe300a63a38fbd314fc2f8fe516650a250e3b8a09b41de6298d46b824a3ec4df320c838c3aaf9c44e2bb3a3f8d5468b62658316f95ee25df870",
            "file": "src/app/core/language/language.service.ts",
            "properties": [
                {
                    "name": "downloadedPartials",
                    "defaultValue": "new Set<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initialPartials",
                    "defaultValue": "new Set<string>(['menu', 'map-data'])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setTranslateLanguage$",
                    "defaultValue": "this.store.pipe(\r\n    select(selectLanguageState),\r\n    distinctUntilChanged(),\r\n    filter(Boolean),\r\n    tap(language => {\r\n      this.translate.use(language || DEFAULT_LANGUAGE);\r\n      this.loadPartials([...this.initialPartials]);\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetchPartial",
                    "args": [
                        {
                            "name": "partial",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.translate.currentLang"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "partial",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.translate.currentLang",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadPartials",
                    "args": [
                        {
                            "name": "partials",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "partials",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable, forkJoin, Subscription, of, lastValueFrom } from 'rxjs';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { catchError, distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport build from '@env/build.json';\r\nimport { AppState, selectLanguageState } from '../core.state';\r\n\r\nconst DEFAULT_LANGUAGE = 'en';\r\n\r\n@Injectable()\r\nexport class LanguageService {\r\n  private translations: { [key: string]: any } = {};\r\n\r\n  private downloadedPartials = new Set<string>();\r\n\r\n  private initialPartials = new Set<string>(['menu', 'map-data']);\r\n\r\n  constructor(\r\n    private translate: TranslateService,\r\n    private store: Store<AppState>,\r\n    private http: HttpClient\r\n  ) {}\r\n\r\n  setTranslateLanguage$: Observable<string> = this.store.pipe(\r\n    select(selectLanguageState),\r\n    distinctUntilChanged(),\r\n    filter(Boolean),\r\n    tap(language => {\r\n      this.translate.use(language || DEFAULT_LANGUAGE);\r\n      this.loadPartials([...this.initialPartials]);\r\n    })\r\n  );\r\n\r\n  loadPartials(partials: string[] = []): Promise<boolean> {\r\n    if (!partials.length) return Promise.resolve(true);\r\n    return lastValueFrom(\r\n      forkJoin(partials.map(partial => this.fetchPartial(partial))).pipe(\r\n        map(() => true),\r\n        catchError(() => of(true))\r\n      )\r\n    );\r\n  }\r\n\r\n  private fetchPartial<T>(partial: string, lang: string = this.translate.currentLang): Observable<T> {\r\n    if (this.downloadedPartials.has(partial)) return of(null);\r\n    this.downloadedPartials.add(partial);\r\n    const buildTimestamp = new Date(build.timestamp).getTime();\r\n    return this.http.get<any>(`assets/i18Local/${lang}/${partial}.json?v=${buildTimestamp}`).pipe(\r\n      tap(response => {\r\n        const translations = {\r\n          ...this.translate.translations[lang],\r\n          ...this.translations[lang],\r\n          ...response,\r\n        };\r\n        this.translations[lang] = translations;\r\n        this.translate.setTranslation(lang, translations);\r\n      }),\r\n      catchError(error => {\r\n        console.error(`Failed to load partial ${partial}:`, error);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  init(): Subscription {\r\n    return this.setTranslateLanguage$.subscribe();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MapSearchService",
            "id": "injectable-MapSearchService-fd3da063081f3577c395443c456f6a149c540875c2a73784dda4a0933737d5a19e30ca86d734a760ef96b0437698f9c36ca3f3310cffb2240385f49ec7f63e83",
            "file": "src/app/components/commons/map/components/map-search/map-search.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://api.mapbox.com/search/geocode/v6/forward'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ISearchData[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "response",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpService } from '@app/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { MAPBOX_API_KEY } from '@app/components/commons/map/map.constants';\r\nimport { ISearchData } from './map-search.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MapSearchService extends HttpService {\r\n  private baseUrl = 'https://api.mapbox.com/search/geocode/v6/forward';\r\n\r\n  getData(searchTerm: string): Observable<ISearchData[]> {\r\n    const params = {\r\n      q: searchTerm,\r\n      limit: 10,\r\n      access_token: MAPBOX_API_KEY,\r\n    };\r\n    return this.get<ISearchData[]>(this.baseUrl, { params }, true).pipe(\r\n      map((data: any) => {\r\n        const { features } = data || {};\r\n        return (\r\n          features?.map((item: any) => {\r\n            const { id, geometry, properties } = item || {};\r\n            return {\r\n              id,\r\n              geometry,\r\n              properties,\r\n              displayName: properties?.full_address,\r\n            };\r\n          }) ?? []\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "extends": [
                "HttpService"
            ],
            "type": "injectable"
        },
        {
            "name": "MapService",
            "id": "injectable-MapService-1a3b81450f95fd4c1f7e779d4ffbd75dd3ab0da813e843cdbf7b6211a6013ccfbb02176bac6216723e476fd4db2c22f31f1846711d18cdfd57957abd3ec7dbf9",
            "file": "src/app/components/commons/map/map.service.ts",
            "properties": [
                {
                    "name": "mapHomePosition$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "searchData$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ISearchData>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selectedLayerForLegend$",
                    "defaultValue": "new BehaviorSubject('precipitation')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "selectedTileLayerBackground$",
                    "defaultValue": "new BehaviorSubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "updateLegendLayer",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTileLayer",
                    "args": [
                        {
                            "name": "layerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "layerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ISearchData } from './components/map-search/map-search.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MapService {\r\n  selectedTileLayerBackground$: BehaviorSubject<number> = new BehaviorSubject(1);\r\n\r\n  mapHomePosition$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  selectedLayerForLegend$: BehaviorSubject<string> = new BehaviorSubject('precipitation');\r\n\r\n  searchData$: BehaviorSubject<ISearchData> = new BehaviorSubject(null);\r\n\r\n  updateTileLayer(layerId: number): void {\r\n    this.selectedTileLayerBackground$.next(layerId);\r\n  }\r\n\r\n  updateLegendLayer(name: string): void {\r\n    this.selectedLayerForLegend$.next(name);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TranslateResolver",
            "id": "injectable-TranslateResolver-8bb31e1b5177d11b501beca00d11994882341ab3e5850a4152792aded88c13f6d694786af36bc91faf8d2056ac75767667164cfcc625b8108fdf7134eff750f9",
            "file": "src/app/core/language/translate.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "extractTranslatePartials",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { LanguageService } from './language.service';\r\nimport { CoreModule } from '../core.module';\r\n\r\n@Injectable({\r\n  providedIn: CoreModule,\r\n})\r\nexport class TranslateResolver {\r\n  constructor(private languageService: LanguageService) {}\r\n\r\n  private extractTranslatePartials(route: ActivatedRouteSnapshot): string[] {\r\n    const i18n = route.data.i18Local || [];\r\n    return Array.isArray(i18n) ? i18n : [i18n];\r\n  }\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Promise<boolean> {\r\n    const i18nPartials = this.extractTranslatePartials(route);\r\n    return this.languageService.loadPartials(i18nPartials);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "WeatherPopupService",
            "id": "injectable-WeatherPopupService-3486606b7317f3a1216e09f20bde96164b9c8ccbca62610edd200ed8d6d8b1e88135f380e607338b70e14f30f3cdf5c0147da28a554bf41f28d82064746af9a8",
            "file": "src/app/components/commons/map/components/maps-popup/maps-popup.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${API_URL}/weather`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getWeatherData",
                    "args": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lon",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lon",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "response",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpService } from '@app/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IParams } from '@app/core/http/http.model';\r\nimport { API_KEY, API_URL } from '@app/components/commons/map/map.constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport abstract class WeatherPopupService extends HttpService {\r\n  private baseUrl = `${API_URL}/weather`;\r\n\r\n  getWeatherData(lat: number, lon: number): Observable<any> {\r\n    const params: IParams = {\r\n      lat,\r\n      lon,\r\n      appid: API_KEY,\r\n      units: 'metric',\r\n    };\r\n    return this.get(this.baseUrl, { params }, true);\r\n  }\r\n}\r\n",
            "extends": [
                "HttpService"
            ],
            "type": "injectable"
        },
        {
            "name": "WeatherWidgetService",
            "id": "injectable-WeatherWidgetService-e4de14e5e6706ba53b8809cf50fb23d602bc60c23d6966440907968e1a102996d728d1cd98940485bff98e86e278be52a5890b3098b104c355f650967532921f",
            "file": "src/app/components/commons/weather-widget/weather-widget.service.ts",
            "properties": [
                {
                    "name": "API_KEY",
                    "defaultValue": "'ae98d58d517252f2065829367d320dbb'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "API_URL",
                    "defaultValue": "'https://api.openweathermap.org/data/2.5/weather'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getWeather",
                    "args": [
                        {
                            "name": "city",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IWeatherData>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "city",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "response",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpService } from '@app/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { IParams } from '@app/core/http/http.model';\r\nimport { IWeatherData } from './weather-widget.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport abstract class WeatherWidgetService extends HttpService {\r\n  API_URL = 'https://api.openweathermap.org/data/2.5/weather';\r\n\r\n  private API_KEY = 'ae98d58d517252f2065829367d320dbb';\r\n\r\n  getWeather(city: string): Observable<IWeatherData> {\r\n    const params: IParams = {\r\n      q: city,\r\n      appid: this.API_KEY,\r\n      units: 'metric',\r\n    };\r\n\r\n    return this.get<IWeatherData>(this.API_URL, { params }, true).pipe(\r\n      map((data: any) => ({\r\n        id: data.id,\r\n        city: data?.name ?? '',\r\n        temp: data?.main?.temp ?? null,\r\n        description: data?.weather?.[0]?.description ?? '',\r\n        icon: `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`,\r\n      }))\r\n    );\r\n  }\r\n}\r\n",
            "extends": [
                "HttpService"
            ],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ActionLanguageChange",
            "id": "class-ActionLanguageChange-364dfd6fffdf91786aa57f357db19889f63db446ac3d10acd4ae55fa4c449363c04cdce6ea6f9f28c8ec275a98bd898090af81bd1a164177d9887210dbe2dd03",
            "file": "src/app/core/language/store/language.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { LanguageType } from '../language.models';\r\n\r\nexport enum LanguageActionTypes {\r\n  CHANGE_LANGUAGE = '[Language] Change Language',\r\n}\r\n\r\nexport class ActionLanguageChange implements Action {\r\n  readonly type = LanguageActionTypes.CHANGE_LANGUAGE;\r\n\r\n  constructor(public payload: LanguageType) {}\r\n}\r\n\r\nexport type LanguageActions = ActionLanguageChange;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "LanguageType",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "LanguageType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LanguageActionTypes.CHANGE_LANGUAGE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FakeLoader",
            "id": "class-FakeLoader-129041f54edbfb34b2507bc609fdd4a648206bba2a3654bef7c12ec3aa8750078697d47894ba9907111a55cfb3f2b541c78a490f8a4af6a86d7a4e3c51f8bf0c",
            "file": "src/app/fake-loader.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TranslateLoader } from '@ngx-translate/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n// Definicja FakeLoader\r\nexport class FakeLoader implements TranslateLoader {\r\n  getTranslation(lang: string): Observable<any> {\r\n    // Możesz tu zwrócić podstawowy obiekt tłumaczeń lub pusty obiekt\r\n    return of({\r\n      BTN_HOME: 'Home',\r\n      ZOOM_IN_TOOLTIP: 'Zoom In',\r\n      ZOOM_OUT_TOOLTIP: 'Zoom Out',\r\n      // Dodaj dowolne inne klucze tłumaczeń, których używają twoje komponenty\r\n    });\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "TranslateLoader"
            ]
        },
        {
            "name": "HttpOptions",
            "id": "class-HttpOptions-5215da531f5ae417b22c85cf24fda41573b11c375d0c275ce151d96e4b342fe79fd259f73962baf4b0d8728382f8dfead77ca6b12686107b8431223efecb9548",
            "file": "src/app/core/http/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpHeaders } from '@angular/common/http';\r\n\r\nexport type HttpObserveType = 'body' | 'events' | 'response';\r\n\r\nexport interface IParams {\r\n  [param: string]: number | number[] | string | string[] | boolean | boolean[];\r\n}\r\n\r\nexport class HttpOptions {\r\n  headers?: HttpHeaders | { [header: string]: string | string[] };\r\n\r\n  observe?: 'body';\r\n\r\n  params?: IParams;\r\n\r\n  reportProgress?: boolean;\r\n\r\n  responseType?: 'json';\r\n\r\n  withCredentials?: boolean;\r\n}\r\n\r\nexport class HttpRequestOptions {\r\n  body?: any;\r\n\r\n  headers?: HttpHeaders | { [header: string]: string | string[] };\r\n\r\n  params?: {\r\n    [param: string]: string | string[];\r\n  };\r\n\r\n  observe?: HttpObserveType;\r\n\r\n  reportProgress?: boolean;\r\n\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n\r\n  withCredentials?: boolean;\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpHeaders | literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "observe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IParams",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "reportProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "responseType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "withCredentials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpRequestOptions",
            "id": "class-HttpRequestOptions-5215da531f5ae417b22c85cf24fda41573b11c375d0c275ce151d96e4b342fe79fd259f73962baf4b0d8728382f8dfead77ca6b12686107b8431223efecb9548",
            "file": "src/app/core/http/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpHeaders } from '@angular/common/http';\r\n\r\nexport type HttpObserveType = 'body' | 'events' | 'response';\r\n\r\nexport interface IParams {\r\n  [param: string]: number | number[] | string | string[] | boolean | boolean[];\r\n}\r\n\r\nexport class HttpOptions {\r\n  headers?: HttpHeaders | { [header: string]: string | string[] };\r\n\r\n  observe?: 'body';\r\n\r\n  params?: IParams;\r\n\r\n  reportProgress?: boolean;\r\n\r\n  responseType?: 'json';\r\n\r\n  withCredentials?: boolean;\r\n}\r\n\r\nexport class HttpRequestOptions {\r\n  body?: any;\r\n\r\n  headers?: HttpHeaders | { [header: string]: string | string[] };\r\n\r\n  params?: {\r\n    [param: string]: string | string[];\r\n  };\r\n\r\n  observe?: HttpObserveType;\r\n\r\n  reportProgress?: boolean;\r\n\r\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n\r\n  withCredentials?: boolean;\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpHeaders | literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "observe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpObserveType",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "reportProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "responseType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"arraybuffer\" | \"blob\" | \"json\" | \"text\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "withCredentials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MissingTranslation",
            "id": "class-MissingTranslation-d6f9a6d5b3cf28999376bc77accacdd961348ace18e8c740f28ef390255a49541f507bfb1375f54fa583f72bf4bac0fbab538e9e8c9ef75b5226ee205ba74386",
            "file": "src/app/core/language/missing-translation.handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MissingTranslationHandler, MissingTranslationHandlerParams } from '@ngx-translate/core';\r\n\r\nexport class MissingTranslation implements MissingTranslationHandler {\r\n  handle(params: MissingTranslationHandlerParams): string {\r\n    const [key] = params.key.split('.');\r\n    return key === 'default' ? '' : params.key;\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "handle",
                    "args": [
                        {
                            "name": "params",
                            "type": "MissingTranslationHandlerParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "MissingTranslationHandlerParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "MissingTranslationHandler"
            ]
        }
    ],
    "directives": [
        {
            "name": "NgForTrackByIndexDirective",
            "id": "directive-NgForTrackByIndexDirective-4a51b59ec63a6d3f6c11546f119c4891e847249e11c8ce3f5e5bb871796bd8b4e611f40c906a63bf8616d2524f9c0ff29ff95e435f607fb077185e9d0cb1a84c",
            "file": "src/app/shared/directives/ngFor-trackByIndex.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgForOf } from '@angular/common';\r\nimport { Directive, Host } from '@angular/core';\r\n\r\nexport interface Item {\r\n  id?: number | string;\r\n  [key: string]: any | any[];\r\n}\r\n\r\n@Directive({\r\n  selector: '[ngForTrackByIndex]',\r\n})\r\nexport class NgForTrackByIndexDirective<T extends Item> {\r\n  constructor(@Host() private ngFor: NgForOf<T>) {\r\n    this.ngFor.ngForTrackBy = (index: number, item: T): number | string | undefined => item.id;\r\n  }\r\n}\r\n",
            "selector": "[ngForTrackByIndex]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngFor",
                        "type": "NgForOf<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "ngFor",
                        "type": "NgForOf<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-8615469a6d2ef80d9ea1e90dccc6cc9ac31b7daa948049d8fa8fbbff4c778cbecac14e69e1f08e5d338c06488031ae9a4e3b235fad1c8c95ce156f58b3f8627b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-main />\r\n"
        },
        {
            "name": "BtnControlsComponent",
            "id": "component-BtnControlsComponent-45d4a0de0588c5577e89e825cc04c7f0411db25ccd66efa011e561ade459cb9f47c4f9c7e56a93a05a472efd0f49e72b458be3f4681beea84e161f6a55e49fa6",
            "file": "src/app/components/commons/map/components/btn-controls/btn-controls.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-btn-controls",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./btn-controls.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mapView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Map",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "{\r\n    [BTN_ZOOM_IN]: (): void => {\r\n      this.onZoomIn();\r\n    },\r\n    [BTN_ZOOM_OUT]: (): void => {\r\n      this.onZoomOut();\r\n    },\r\n    [BTN_HOME]: (): void => {\r\n      this.onMapHomeCenter();\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "collapsedSidebarRight$",
                    "defaultValue": "of(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "layerUpdateSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mapsTilleLayers",
                    "defaultValue": "MapsTilleLayers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedBackgroundLayer",
                    "defaultValue": "TileLayerBackground.find(layer => layer.checked)?.id || 1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "selectedTileLayer",
                    "defaultValue": "this.mapsTilleLayers[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "sidebarRightConfig",
                    "defaultValue": "sidebarConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "animateZoom",
                    "args": [
                        {
                            "name": "factor",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "factor",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleOutsideClick",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onButtonControlAction",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLayerChange",
                    "args": [
                        {
                            "name": "item",
                            "type": "ISidebarConfig | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "CheckboxTypes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ISidebarConfig | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "CheckboxTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMapHomeCenter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTileLayerChange",
                    "args": [
                        {
                            "name": "layerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "layerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onWeatherLayerChange",
                    "args": [
                        {
                            "name": "selectedLayer",
                            "type": "ISidebarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedLayer",
                            "type": "ISidebarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onZoomIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onZoomOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSideBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startLayerUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSelectedTileLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 127
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport Map from 'ol/Map';\r\nimport { easeIn, easeOut } from 'ol/easing';\r\nimport { Observable, Subscription, concatMap, from, interval, of } from 'rxjs';\r\nimport { ExpandCollapseHorizontal } from '@app/shared/animations/animations';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport { XYZ } from 'ol/source';\r\nimport { MapService } from '@app/components/commons/map/map.service';\r\nimport { MapsTilleLayers, sidebarConfig, TileLayerBackground } from './btn-controls.config';\r\nimport { CheckboxTypes, ISidebarConfig } from './btn-controls.models';\r\nimport { ButtonsControl } from './btn-controls.enums';\r\n\r\nconst { BTN_HOME, BTN_ZOOM_IN, BTN_ZOOM_OUT } = ButtonsControl;\r\n\r\n@Component({\r\n  selector: 'app-btn-controls',\r\n  templateUrl: './btn-controls.component.html',\r\n  styleUrl: './btn-controls.component.scss',\r\n  animations: [ExpandCollapseHorizontal],\r\n})\r\nexport class BtnControlsComponent implements OnInit, OnDestroy {\r\n  @Input() mapView!: Map;\r\n\r\n  sidebarRightConfig = sidebarConfig();\r\n\r\n  collapsedSidebarRight$: Observable<boolean> = of(true);\r\n\r\n  mapsTilleLayers = MapsTilleLayers;\r\n\r\n  selectedTileLayer = this.mapsTilleLayers[0];\r\n\r\n  selectedBackgroundLayer = TileLayerBackground.find(layer => layer.checked)?.id || 1;\r\n\r\n  actions = {\r\n    [BTN_ZOOM_IN]: (): void => {\r\n      this.onZoomIn();\r\n    },\r\n    [BTN_ZOOM_OUT]: (): void => {\r\n      this.onZoomOut();\r\n    },\r\n    [BTN_HOME]: (): void => {\r\n      this.onMapHomeCenter();\r\n    },\r\n  };\r\n\r\n  private layerUpdateSubscription!: Subscription;\r\n\r\n  constructor(private mapService: MapService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.mapView.addLayer(this.selectedTileLayer.tile);\r\n\r\n    this.startLayerUpdate();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.sidebarRightConfig = [];\r\n    if (this.layerUpdateSubscription) this.layerUpdateSubscription.unsubscribe();\r\n  }\r\n\r\n  startLayerUpdate(): void {\r\n    this.layerUpdateSubscription = interval(60000).subscribe(() => {\r\n      this.updateSelectedTileLayer();\r\n    });\r\n  }\r\n\r\n  updateSelectedTileLayer(): void {\r\n    this.mapView.getLayers().forEach(layer => {\r\n      if (layer === this.selectedTileLayer.tile && layer instanceof TileLayer) {\r\n        const tileLayer = layer as TileLayer;\r\n        const source = tileLayer.getSource();\r\n        if (source instanceof XYZ) source.refresh();\r\n      }\r\n    });\r\n  }\r\n\r\n  onButtonControlAction(id: string): void {\r\n    if (id in this.actions) this.actions[id]();\r\n  }\r\n\r\n  onLayerChange(item: ISidebarConfig | number, type: CheckboxTypes): void {\r\n    if (type === 'tile') {\r\n      this.onWeatherLayerChange(item as ISidebarConfig);\r\n    } else {\r\n      this.onTileLayerChange(item as number);\r\n    }\r\n  }\r\n\r\n  onWeatherLayerChange(selectedLayer: ISidebarConfig): void {\r\n    this.mapsTilleLayers.forEach(layer => {\r\n      if (this.mapView.getLayers().getArray().includes(layer.tile)) this.mapView.removeLayer(layer.tile);\r\n    });\r\n\r\n    this.mapView.addLayer(selectedLayer.tile);\r\n    this.mapService.updateLegendLayer(selectedLayer.name);\r\n  }\r\n\r\n  onTileLayerChange(layerId: number): void {\r\n    this.mapService.updateTileLayer(layerId);\r\n  }\r\n\r\n  onZoomIn(): void {\r\n    this.animateZoom(1);\r\n  }\r\n\r\n  onZoomOut(): void {\r\n    this.animateZoom(-1);\r\n  }\r\n\r\n  onMapHomeCenter(): void {\r\n    this.mapService.mapHomePosition$.next(true);\r\n    setTimeout(() => {\r\n      this.mapService.mapHomePosition$.next(false);\r\n    }, 20);\r\n  }\r\n\r\n  animateZoom(factor: number): void {\r\n    const view = this.mapView.getView();\r\n    view.animate({ zoom: view.getZoom() + factor, easing: factor > 0 ? easeIn : easeOut, duration: 500 });\r\n  }\r\n\r\n  openSideBar(): void {\r\n    this.collapsedSidebarRight$ = from(this.collapsedSidebarRight$).pipe(concatMap(content => of(!content)));\r\n  }\r\n\r\n  @HostListener('document:click', ['$event.target'])\r\n  handleOutsideClick(target: HTMLElement): void {\r\n    if (!target.closest('.map-sidebar')) {\r\n      this.collapsedSidebarRight$ = of(false);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./btn-controls.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"map-sidebar\">\r\n  <ul class=\"sidebar-menu\" [@expandCollapseHorizontal]=\"(collapsedSidebarRight$ | async) ? 'final' : 'initial'\">\r\n    <ng-container *ngTemplateOutlet=\"nodes; context: { $implicit: sidebarRightConfig }\"></ng-container>\r\n  </ul>\r\n\r\n  <div class=\"open-mapsidebar\" [ngClass]=\"(collapsedSidebarRight$ | async) ? 'open' : ''\">\r\n    <app-button [isRound]=\"true\" (btnClick)=\"openSideBar()\">\r\n      <i nz-icon nzType=\"double-left\" [ngClass]=\"(collapsedSidebarRight$ | async) ? 'open' : ''\"></i>\r\n    </app-button>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #nodes let-menu>\r\n  <ng-container *ngFor=\"let item of menu; index as i; trackByIndex\">\r\n    <li>\r\n      <p class=\"title\">{{ item.title | translate }}</p>\r\n      <div *ngIf=\"item?.type === 'button'\" class=\"btn-controls\">\r\n        <app-button\r\n          *ngFor=\"let btn of item.children; trackByIndex\"\r\n          [ngClass]=\"['top-btn']\"\r\n          [isRound]=\"true\"\r\n          class=\"btn-root\"\r\n          className=\"{{ btn?.additionalClass ?? '' }} {{ btn.selected ? 'active' : '' }}\"\r\n          [nzTooltipTitle]=\"'mapData.buttons.' + btn?.tooltipTitle | translate\"\r\n          nzTooltipOverlayClassName=\"tooltip-btn-left\"\r\n          nz-tooltip\r\n          [nzTooltipPlacement]=\"btn?.tooltipPlacement ?? 'left'\"\r\n          (btnClick)=\"onButtonControlAction(btn?.id)\"\r\n        >\r\n          <i nz-icon [nzType]=\"btn?.iconType\"></i>\r\n        </app-button>\r\n      </div>\r\n\r\n      <nz-radio-group\r\n        *ngIf=\"item?.type === 'radio-item' && item?.typeCheckbox === 'weather'\"\r\n        class=\"tile-list\"\r\n        [(ngModel)]=\"selectedTileLayer\"\r\n        (ngModelChange)=\"onWeatherLayerChange($event)\"\r\n      >\r\n        <label nz-radio *ngFor=\"let layer of item.children; trackByIndex\" [nzValue]=\"layer\">\r\n          {{ layer.name }}\r\n        </label>\r\n      </nz-radio-group>\r\n\r\n      <nz-radio-group\r\n        *ngIf=\"item?.type === 'radio-item' && item?.typeCheckbox === 'tile'\"\r\n        class=\"tile-list\"\r\n        [(ngModel)]=\"selectedBackgroundLayer\"\r\n        (ngModelChange)=\"onTileLayerChange($event)\"\r\n      >\r\n        <label nz-radio *ngFor=\"let layer of item.children; trackByIndex\" [nzValue]=\"layer.value\">\r\n          {{ layer.name }}\r\n        </label>\r\n      </nz-radio-group>\r\n    </li>\r\n  </ng-container>\r\n</ng-template>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a6c839663cbf6391ae13ed770481959b027b26bd581b10d21ce9b1f29e56de5e5a5a98e9824e84a9dd2d6c26dd1394f5efa3b6699bb74141e63b1f74d3305cd5-1",
            "file": "src/app/components/commons/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "className",
                    "defaultValue": "'default-button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string | string[]",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string | number",
                    "decorators": []
                },
                {
                    "name": "isRound",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<MouseEvent>"
                },
                {
                    "name": "btnClickId",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<string | any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClickButton",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.scss',\r\n})\r\nexport class ButtonComponent {\r\n  @Input() id: string | number;\r\n\r\n  @Input() name = '';\r\n\r\n  @Input() icon = '';\r\n\r\n  @Input() disabled = false;\r\n\r\n  @Input() type = '';\r\n\r\n  @Input() className = 'default-button';\r\n\r\n  @Input() isRound = false;\r\n\r\n  @Input() customClass: string | string[] = '';\r\n\r\n  @Input() tooltipTitle: string = '';\r\n\r\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter();\r\n\r\n  @Output() btnClickId: EventEmitter<string | any> = new EventEmitter();\r\n\r\n  onClickButton(event: MouseEvent, id?: string): void {\r\n    this.btnClick.emit(event);\r\n    this.btnClickId.emit(id ?? this.id ?? null);\r\n  }\r\n\r\n  get ariaLabel(): string {\r\n    return this.name || 'button';\r\n  }\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "ariaLabel": {
                    "name": "ariaLabel",
                    "getSignature": {
                        "name": "ariaLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button\r\n  [disabled]=\"disabled\"\r\n  [type]=\"type\"\r\n  (click)=\"onClickButton($event)\"\r\n  [class]=\"className\"\r\n  [class.round]=\"isRound\"\r\n  class=\"button-component\"\r\n  [ngClass]=\"customClass ?? ''\"\r\n  nz-tooltip\r\n  nzTooltipPlacement=\"top\"\r\n  nzTooltipOverlayClassName=\"tooltip-btn-top\"\r\n  [nzTooltipTitle]=\"tooltipTitle | translate\"\r\n  [attr.aria-label]=\"ariaLabel\"\r\n  [attr.aria-disabled]=\"disabled\"\r\n>\r\n  {{ name ? (name | translate) : '' }}\r\n  <i *ngIf=\"icon\" nz-icon [nzType]=\"icon\"></i>\r\n\r\n  <ng-content></ng-content>\r\n</button>\r\n"
        },
        {
            "name": "CurrentWeatherComponent",
            "id": "component-CurrentWeatherComponent-e577a6c953218cd19915500ff3a65d6126282cd9b3a71fc3da548f42f10b7f0c84b8106f670d6391bc7388bbcbee8818f3c44bc977987716f1f5655b669935a8",
            "file": "src/app/components/content/home/current-weather/current-weather.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-current-weather",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./current-weather.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "weatherData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "IWeatherData | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "date",
                    "defaultValue": "`${days[this.currentDate.getDay()]} ${this.currentDate.getDate()} ${months[this.currentDate.getMonth()]}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { days, months } from './current-weather.constants';\r\nimport { IWeatherData } from '../home.model';\r\n\r\n@Component({\r\n  selector: 'app-current-weather',\r\n  templateUrl: './current-weather.component.html',\r\n})\r\nexport class CurrentWeatherComponent {\r\n  @Input() weatherData?: IWeatherData | null;\r\n\r\n  currentDate: Date = new Date();\r\n\r\n  date: string = `${days[this.currentDate.getDay()]} ${this.currentDate.getDate()} ${months[this.currentDate.getMonth()]}`;\r\n\r\n  get temperature(): number {\r\n    return Math.floor(this.weatherData?.main?.temp ?? 0);\r\n  }\r\n\r\n  get details(): { label: string; value: string | number | null }[] {\r\n    return [\r\n      { label: 'Temp Max', value: `${Math.floor(this.weatherData?.main?.temp_max ?? 0)}°` },\r\n      { label: 'Temp Min', value: `${Math.floor(this.weatherData?.main?.temp_min ?? 0)}°` },\r\n      { label: 'Wind', value: `${this.weatherData?.wind?.speed ?? 0} m/s` },\r\n      { label: 'Humidity', value: `${this.weatherData?.main?.humidity ?? 0}%` },\r\n      { label: 'Sunrise', value: this.weatherData?.sunrise ?? 'N/A' },\r\n      { label: 'Sunset', value: this.weatherData?.sunset ?? 'N/A' },\r\n    ];\r\n  }\r\n\r\n  get weatherIconUrl(): string {\r\n    const icon = this.weatherData?.weather?.[0]?.icon;\r\n    return icon ? `https://openweathermap.org/img/wn/${icon}.png` : '';\r\n  }\r\n\r\n  get weatherDescription(): string {\r\n    return this.weatherData?.weather?.[0]?.description || 'No description';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "temperature": {
                    "name": "temperature",
                    "getSignature": {
                        "name": "temperature",
                        "type": "number",
                        "returnType": "number",
                        "line": 16
                    }
                },
                "details": {
                    "name": "details",
                    "getSignature": {
                        "name": "details",
                        "type": "[]",
                        "returnType": "literal type[]",
                        "line": 20
                    }
                },
                "weatherIconUrl": {
                    "name": "weatherIconUrl",
                    "getSignature": {
                        "name": "weatherIconUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 31
                    }
                },
                "weatherDescription": {
                    "name": "weatherDescription",
                    "getSignature": {
                        "name": "weatherDescription",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                }
            },
            "templateData": "<div class=\"current-weather\">\r\n  <div class=\"column first-column\">\r\n    <h2>{{ weatherData?.name ?? '' }}, {{ weatherData?.sys?.country ?? '' }}</h2>\r\n    <span>{{ date }}</span>\r\n  </div>\r\n\r\n  <div class=\"column second-column\">\r\n    <div class=\"icon-column\">\r\n      <img [src]=\"weatherIconUrl\" alt=\"weatherDescription\" />\r\n    </div>\r\n    <div class=\"temp-column\">\r\n      <p class=\"temperature\">{{ temperature }}&#176;</p>\r\n      <p class=\"desc\">{{ weatherDescription }}</p>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"column third-column\">\r\n    <div *ngFor=\"let detail of details; trackByIndex\" class=\"weather-detail\">\r\n      <p class=\"detail-value\">{{ detail?.value }}</p>\r\n      <p class=\"detail-label\">{{ detail?.label }}</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ForecastWeatherComponent",
            "id": "component-ForecastWeatherComponent-70a6a6fa042b7f3d3fc4cb3c530fd0bf6cf7f851258596963e1f085c5bb0e82fc248f1cfe32c9298062503bc80c34b1fe5fe669e61d3c4b9b5fcd004649f1ed9",
            "file": "src/app/components/content/home/forecast-weather/forecast-weather.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forecast-weather",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./forecast-weather.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "forecast",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "IForecast[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<ChartOptions>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "forecastTilesRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'forecastTiles'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isDragging",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "scrollLeft",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "startX",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupChartOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnChanges, ViewChild, ElementRef, SimpleChanges } from '@angular/core';\r\nimport { ApexAxisChartSeries, ApexChart, ApexFill, ApexMarkers, ApexXAxis, ApexYAxis, ApexTooltip } from 'ng-apexcharts';\r\nimport { IForecast } from '../home.model';\r\n\r\nexport type ChartOptions = {\r\n  series: ApexAxisChartSeries;\r\n  chart: ApexChart;\r\n  xaxis: ApexXAxis;\r\n  yaxis: ApexYAxis;\r\n  markers: ApexMarkers;\r\n  fill: ApexFill;\r\n  tooltip: ApexTooltip;\r\n};\r\n\r\n@Component({\r\n  selector: 'app-forecast-weather',\r\n  templateUrl: './forecast-weather.component.html',\r\n})\r\nexport class ForecastWeatherComponent implements OnInit, OnChanges {\r\n  @Input() forecast: IForecast[] = [];\r\n\r\n  @ViewChild('forecastTiles') forecastTilesRef!: ElementRef;\r\n\r\n  chartOptions!: Partial<ChartOptions>;\r\n\r\n  isDragging = false;\r\n\r\n  startX = 0;\r\n\r\n  scrollLeft = 0;\r\n\r\n  ngOnInit(): void {\r\n    this.setupChartOptions();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.forecast) {\r\n      this.setupChartOptions();\r\n    }\r\n  }\r\n\r\n  private setupChartOptions(): void {\r\n    const labels = this.forecast.map(f => new Date((f.dt ?? 0) * 1000).toLocaleString('en-US', { weekday: 'short', hour: 'numeric' }));\r\n    const temperatureData = this.forecast.map(f => f.main?.temp ?? null);\r\n\r\n    this.chartOptions = {\r\n      series: [{ name: 'Temperature', data: temperatureData }],\r\n      chart: { type: 'line', zoom: { enabled: false }, toolbar: { show: false } },\r\n      xaxis: { categories: labels },\r\n      yaxis: { title: { text: 'Temperature (°C)' } },\r\n      markers: { size: 5, colors: ['#FF4560'] },\r\n      fill: { type: 'gradient', gradient: { shade: 'light', type: 'vertical', opacityFrom: 0.7, opacityTo: 0.4 } },\r\n      tooltip: { shared: true, intersect: false },\r\n    };\r\n  }\r\n\r\n  onMouseDown(event: MouseEvent): void {\r\n    this.isDragging = true;\r\n    this.startX = event.pageX - this.forecastTilesRef.nativeElement.offsetLeft;\r\n    this.scrollLeft = this.forecastTilesRef.nativeElement.scrollLeft;\r\n  }\r\n\r\n  onMouseLeave(): void {\r\n    this.isDragging = false;\r\n  }\r\n\r\n  onMouseUp(): void {\r\n    this.isDragging = false;\r\n  }\r\n\r\n  onMouseMove(event: MouseEvent): void {\r\n    if (!this.isDragging) return;\r\n    const x = event.pageX - this.forecastTilesRef.nativeElement.offsetLeft;\r\n    const scroll = (x - this.startX) * 2;\r\n    this.forecastTilesRef.nativeElement.scrollLeft = this.scrollLeft - scroll;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"forecast-weather\">\r\n  <h2>5-Day Forecast</h2>\r\n\r\n  <div\r\n    #forecastTiles\r\n    class=\"forecast-tiles\"\r\n    (mousedown)=\"onMouseDown($event)\"\r\n    (mouseleave)=\"onMouseLeave()\"\r\n    (mouseup)=\"onMouseUp()\"\r\n    (mousemove)=\"onMouseMove($event)\"\r\n  >\r\n    <div *ngFor=\"let entry of forecast\" class=\"forecast-tile\">\r\n      <h3>{{ entry.dt * 1000 | date: 'EEE, h a' }}</h3>\r\n      <p>{{ entry.weather?.[0]?.description || 'No description' }}</p>\r\n      <img\r\n        [src]=\"'https://openweathermap.org/img/wn/' + entry.weather?.[0]?.icon + '.png'\"\r\n        [alt]=\"entry.weather?.[0]?.description || 'No description'\"\r\n      />\r\n      <p class=\"temperature\">{{ entry.main?.temp | number: '1.0-0' }}°C</p>\r\n      <p>Feels like: {{ entry.main?.feels_like | number: '1.0-0' }}°C</p>\r\n      <p>Wind: {{ entry.wind?.speed }} m/s</p>\r\n      <p>Humidity: {{ entry.main?.humidity }}%</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"temperature-chart\">\r\n  <apx-chart\r\n    [series]=\"chartOptions.series\"\r\n    [chart]=\"chartOptions.chart\"\r\n    [xaxis]=\"chartOptions.xaxis\"\r\n    [yaxis]=\"chartOptions.yaxis\"\r\n    [markers]=\"chartOptions.markers\"\r\n    [fill]=\"chartOptions.fill\"\r\n    [tooltip]=\"chartOptions.tooltip\"\r\n    height=\"300\"\r\n  ></apx-chart>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-43a0d0f37ce74db3fca3b1bb2084fcadbe919c5824bfc3bad5b74c69afd1c32e6d7c75e75d2f056893b8ed16375b7dcecc53928c8668206d428f55da88560141-1",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuItems",
                    "defaultValue": "menuConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuConfig[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "item",
                            "type": "IMenuConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "IMenuConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pathToParent",
                    "args": [
                        {
                            "name": "array",
                            "type": "IMenuConfig[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "IMenuConfig[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMenuId",
                    "args": [
                        {
                            "name": "menu",
                            "type": "IMenuConfig[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "IMenuConfig[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { menuConfig } from './menu.config';\r\nimport { IMenuConfig } from './menu.models';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrl: './header.component.scss',\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  menuItems: IMenuConfig[] = menuConfig();\r\n\r\n  ngOnInit(): void {\r\n    this.setMenuId(this.menuItems);\r\n  }\r\n\r\n  setMenuId(menu?: IMenuConfig[]): void {\r\n    for (const node of menu) {\r\n      if (node?.children?.length) {\r\n        node.id = uuidv4();\r\n        this.setMenuId(node.children);\r\n      } else {\r\n        node.id = `${uuidv4()}-last`;\r\n      }\r\n    }\r\n  }\r\n\r\n  pathToParent(array: IMenuConfig[], searchId: string): string {\r\n    let result = '';\r\n    array.some(({ id, name, children = [] }) => {\r\n      if (id === searchId) {\r\n        result = name;\r\n      }\r\n      const temp = this.pathToParent(children, searchId);\r\n      if (temp) {\r\n        result = `${name}/${temp}`;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  navigate(item: IMenuConfig): string {\r\n    return `/${this.pathToParent(this.menuItems, item.id)}`;\r\n  }\r\n}\r\n",
            "styleUrl": "./header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<nav class=\"header\">\r\n  <ul class=\"menu\">\r\n    <ng-container *ngFor=\"let item of menuItems; trackByIndex\">\r\n      <li\r\n        [routerLink]=\"item?.children ? null : navigate(item)\"\r\n        routerLinkActive=\"is-active\"\r\n        [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        [id]=\"item.id\"\r\n      >\r\n        <span>{{ item.title | translate }}</span>\r\n      </li>\r\n    </ng-container>\r\n  </ul>\r\n</nav>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-15601c99b95c8a12b7bccfbdd1c75a93ae3a18ee4fdce8c39ce5db36ecd37cc027d204e15f5d940cc00c838aee52d6a1529083ad18b6b8f526f104b2fb2e1e55",
            "file": "src/app/components/content/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cities",
                    "defaultValue": "['Lodz', 'Warszawa', 'Berlin', 'New York', 'London']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "homeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HomeService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "weatherData",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWeatherData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchWeatherData",
                    "args": [
                        {
                            "name": "data",
                            "type": "ISearchData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ISearchData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSearchTerm",
                    "args": [
                        {
                            "name": "data",
                            "type": "ISearchData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ISearchData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { catchError, combineLatest, lastValueFrom, map, of, shareReplay } from 'rxjs';\r\nimport { ISearchData } from '@app/components/commons/map/components/map-search/map-search.models';\r\nimport { sunsetSunrise } from '@app/shared/utils/utils';\r\nimport { IWeatherData } from './home.model';\r\nimport { HomeService } from './home.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrl: './home.component.scss',\r\n})\r\nexport class HomeComponent {\r\n  cities = ['Lodz', 'Warszawa', 'Berlin', 'New York', 'London'];\r\n\r\n  weatherData: IWeatherData = {};\r\n\r\n  constructor(public homeService: HomeService) {}\r\n\r\n  fetchWeatherData(data: ISearchData): void {\r\n    const { city, latitude, longitude } = data || {};\r\n    combineLatest([lastValueFrom(this.homeService.getWeather(city)), lastValueFrom(this.homeService.getForecast(latitude, longitude))])\r\n      .pipe(\r\n        map(([weather, forecast]: any): void => {\r\n          if (weather && forecast?.list?.length) {\r\n            const sunset = sunsetSunrise(weather?.sys?.sunset || 0);\r\n            const sunrise = sunsetSunrise(weather?.sys?.sunrise || 0);\r\n\r\n            this.weatherData = {\r\n              ...weather,\r\n              sunrise,\r\n              sunset,\r\n              city: forecast?.city || null,\r\n              forecast: forecast?.list || [],\r\n            };\r\n          }\r\n        }),\r\n        shareReplay(1),\r\n        catchError((): any => of(false))\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  setSearchTerm(data: ISearchData): void {\r\n    if (data) this.fetchWeatherData(data);\r\n  }\r\n}\r\n",
            "styleUrl": "./home.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "homeService",
                        "type": "HomeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "homeService",
                        "type": "HomeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"section banner\">\r\n  <div class=\"banner-content\">\r\n    <h1><span class=\"orange-text\">OpenWeather</span></h1>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"section px-0\">\r\n  <div class=\"grid-container grid-1-1 gap-0\">\r\n    <div class=\"weather-map-img\"></div>\r\n    <app-weather-widget [cities]=\"cities\" class=\"p-3\" />\r\n  </div>\r\n</div>\r\n\r\n<app-map (searchTerm)=\"setSearchTerm($event)\" />\r\n\r\n<app-current-weather *ngIf=\"weatherData?.city\" [weatherData]=\"weatherData ?? null\" />\r\n\r\n<app-forecast-weather *ngIf=\"weatherData?.forecast?.length\" [forecast]=\"weatherData?.forecast ?? []\" />\r\n"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-0f45f055d30ed4030268243252128db1bc591959d5fbf829dbb36d4378d5f842db8c66b7e43d566a08ad86e03445473a239fe36b5c58dc9a3f76cf383786ee8c",
            "file": "src/app/components/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showOutlet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "getActiveRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRouterOutletState",
                    "args": [
                        {
                            "name": "outlet",
                            "type": "RouterOutlet",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActivatedRoute | string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "outlet",
                            "type": "RouterOutlet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeactivate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { fadeInOut } from '@app/shared/animations/animations';\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.component.html',\r\n  animations: [fadeInOut],\r\n})\r\nexport class MainComponent {\r\n  showOutlet = false;\r\n\r\n  isLoading = true;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  getActiveRoute(): string {\r\n    return this.router.url;\r\n  }\r\n\r\n  onActivate(): void {\r\n    this.showOutlet = true;\r\n  }\r\n\r\n  onDeactivate(): void {\r\n    this.showOutlet = false;\r\n  }\r\n\r\n  getRouterOutletState(outlet: RouterOutlet): ActivatedRoute | string {\r\n    return outlet.isActivated ? outlet.activatedRoute : '';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<main class=\"main\">\r\n  <header id=\"main-header\" class=\"main-header\">\r\n    <app-header />\r\n  </header>\r\n\r\n  <section class=\"main-section\" cdkScrollable [@fadeInOut]=\"getRouterOutletState(outlet)\">\r\n    <router-outlet #outlet=\"outlet\" (activate)=\"onActivate()\" (deactivate)=\"onDeactivate()\"></router-outlet>\r\n  </section>\r\n</main>\r\n"
        },
        {
            "name": "MapComponent",
            "id": "component-MapComponent-b6ac7b5836a2be43bf34c99456884667ac89f7e44f8c38903dfd4130545ca1b90e22282ffb62683edc5d7cbef2d924e69fa78adee8840173b6f82acb2f0f8d18",
            "file": "src/app/components/commons/map/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./map.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "height",
                    "defaultValue": "'50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "mapReady",
                    "defaultValue": "new EventEmitter<Map>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "searchTerm",
                    "defaultValue": "new EventEmitter<ISearchData>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "mapView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectedLayerForLegend",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "tileLayer",
                    "defaultValue": "new TileLayer({\r\n    source: new OSM(),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "vectorLayerTop",
                    "defaultValue": "new VectorImageLayer({\r\n    source: this.vectorSource,\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "vectorSource",
                    "defaultValue": "new VectorSource()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "cleanupMap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeMap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetMapPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToMapService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTileLayer",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorImageLayer from 'ol/layer/VectorImage';\r\nimport Map from 'ol/Map';\r\nimport { OSM } from 'ol/source';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { defaults as defaultControls } from 'ol/control';\r\nimport { tap } from 'rxjs';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { easeOut } from 'ol/easing';\r\nimport { MapConsts, ViewOptions } from './map.constants';\r\nimport { MapService } from './map.service';\r\nimport { TileLayerBackground } from './components/btn-controls/btn-controls.config';\r\nimport { ISearchData } from './components/map-search/map-search.models';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-map',\r\n  templateUrl: './map.component.html',\r\n  styleUrl: './map.component.scss',\r\n})\r\nexport class MapComponent implements OnInit, OnDestroy {\r\n  @Input() height = '50vh';\r\n\r\n  @Output() mapReady = new EventEmitter<Map>();\r\n\r\n  @Output() searchTerm = new EventEmitter<ISearchData>(null);\r\n\r\n  mapView!: Map;\r\n\r\n  vectorSource = new VectorSource();\r\n\r\n  selectedLayerForLegend = '';\r\n\r\n  tileLayer = new TileLayer({\r\n    source: new OSM(),\r\n  });\r\n\r\n  vectorLayerTop = new VectorImageLayer({\r\n    source: this.vectorSource,\r\n  });\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private mapService: MapService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    if (!this.mapView) {\r\n      this.zone.runOutsideAngular(() => {\r\n        this.initializeMap();\r\n        this.subscribeToMapService();\r\n      });\r\n    }\r\n    setTimeout(() => this.mapReady.emit(this.mapView), 0);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.cleanupMap();\r\n  }\r\n\r\n  initializeMap(): void {\r\n    this.mapView = new Map({\r\n      view: new View({ ...ViewOptions }),\r\n      controls: defaultControls({ attribution: false }),\r\n      layers: [this.tileLayer, this.vectorLayerTop],\r\n      target: MapConsts.targetClassName,\r\n    });\r\n    this.mapView.updateSize();\r\n  }\r\n\r\n  subscribeToMapService(): void {\r\n    const { selectedTileLayerBackground$, mapHomePosition$, selectedLayerForLegend$, searchData$ } = this.mapService;\r\n\r\n    mapHomePosition$\r\n      .pipe(\r\n        untilDestroyed(this),\r\n        tap(() => this.resetMapPosition())\r\n      )\r\n      .subscribe();\r\n\r\n    selectedTileLayerBackground$\r\n      .pipe(\r\n        untilDestroyed(this),\r\n        tap(index => this.updateTileLayer(index))\r\n      )\r\n      .subscribe();\r\n\r\n    selectedLayerForLegend$\r\n      .pipe(\r\n        untilDestroyed(this),\r\n        tap(name => {\r\n          this.selectedLayerForLegend = name;\r\n        })\r\n      )\r\n      .subscribe();\r\n\r\n    searchData$\r\n      .pipe(\r\n        untilDestroyed(this),\r\n        tap(data => {\r\n          this.searchTerm.emit(data);\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  updateTileLayer(index: number): void {\r\n    if (this.tileLayer && index >= 0) {\r\n      this.tileLayer.setSource(TileLayerBackground[index].source);\r\n    }\r\n  }\r\n\r\n  resetMapPosition(): void {\r\n    const homeView = new View(ViewOptions);\r\n    this.mapView.getView().animate({\r\n      center: homeView.getCenter(),\r\n      zoom: homeView.getZoom(),\r\n      duration: 1000,\r\n      easing: easeOut,\r\n    });\r\n    this.mapView.updateSize();\r\n  }\r\n\r\n  cleanupMap(): void {\r\n    this.mapView.setTarget(null);\r\n    this.vectorLayerTop.getSource().clear();\r\n  }\r\n}\r\n",
            "styleUrl": "./map.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"map-component\">\r\n  <app-btn-controls [mapView]=\"mapView\" />\r\n  <div class=\"main-map\">\r\n    <div class=\"map-container\" [style.height]=\"height\">\r\n      <app-map-view class=\"map-view\" [mapView]=\"mapView\" tabindex=\"0\" />\r\n      <app-scaleline class=\"scaleline\" [mapView]=\"mapView\" />\r\n      <app-mouse-position class=\"mouse-position\" [mapView]=\"mapView\" />\r\n      <app-map-legend [legend]=\"selectedLayerForLegend\" />\r\n      <app-maps-popup [mapView]=\"mapView\" />\r\n      <app-map-search [mapView]=\"mapView\" />\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "MapLegendComponent",
            "id": "component-MapLegendComponent-614e4f4c23eb46d60c7eea7c5d7611d3ca2d358b56ca02359b3ea361381a6bd6476cd8052f34bebc355743c060fcef7f65bc49d75b31e8bba48064d2a5578f15",
            "file": "src/app/components/commons/map/components/map-legend/map-legend.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map-legend",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./map-legend.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "legend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "scaleDetails",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "getScaleDetails",
                    "args": [
                        {
                            "name": "layerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "layerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { LegendConfig } from './map-legend.config';\r\nimport { ILegend } from './map-legend.models';\r\n\r\n@Component({\r\n  selector: 'app-map-legend',\r\n  templateUrl: './map-legend.component.html',\r\n  styleUrl: './map-legend.component.scss',\r\n})\r\nexport class MapLegendComponent implements OnChanges {\r\n  @Input() legend: string;\r\n\r\n  scaleDetails: { [name: string]: ILegend } = {};\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.legend) {\r\n      this.scaleDetails = this.getScaleDetails(this.legend);\r\n    }\r\n  }\r\n\r\n  getScaleDetails(layerName: string): any {\r\n    return LegendConfig[layerName] || null;\r\n  }\r\n}\r\n",
            "styleUrl": "./map-legend.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"legend && getScaleDetails(legend) as scaleDetails\">\r\n  <div class=\"legend-container\">\r\n    <span class=\"legend-title\">{{ scaleDetails.title }}</span>\r\n    <div class=\"legend-gradient\" style=\"width: 260px\">\r\n      <div class=\"horizontal-gradient-line\" [ngStyle]=\"{ backgroundImage: scaleDetails.gradient }\"></div>\r\n      <div class=\"legend-dividers\">\r\n        <span class=\"dividers\" *ngFor=\"let divider of scaleDetails.dividers; trackByIndex\">{{ divider }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "MapMousePositionComponent",
            "id": "component-MapMousePositionComponent-6d34e3738062638559ec0fcfd9e90f281746736c77041129af7afe5edd363e159f41502664558b2eafcad55e139b23c863094059994471360f874593ecc697e9",
            "file": "src/app/components/commons/map/components/mouse-position.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mouse-position",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mapView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Map",
                    "decorators": []
                },
                {
                    "name": "positionTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MousePosition",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input, ElementRef, AfterViewInit } from '@angular/core';\r\nimport Map from 'ol/Map';\r\nimport MousePosition from 'ol/control/MousePosition';\r\nimport { toStringXY } from 'ol/coordinate';\r\nimport { UntilDestroy } from '@ngneat/until-destroy';\r\nimport { MapSourceClass, TypeEPSG } from '../map.enums';\r\n\r\nconst { EPSG4326 } = TypeEPSG;\r\nconst { MOUSE_POSITION_CONTROL } = MapSourceClass;\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-mouse-position',\r\n  template: ``,\r\n  styleUrl: './map-mouse-position.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MapMousePositionComponent implements AfterViewInit {\r\n  @Input() mapView: Map;\r\n\r\n  @Input() positionTemplate?: string;\r\n\r\n  control?: MousePosition;\r\n\r\n  constructor(private element: ElementRef) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.mapView) {\r\n      setTimeout(() => {\r\n        this.control = new MousePosition({\r\n          projection: EPSG4326,\r\n          className: MOUSE_POSITION_CONTROL,\r\n          coordinateFormat: (coordinates: number[]): string => toStringXY(coordinates, 6),\r\n          target: this.element.nativeElement,\r\n        });\r\n        this.mapView.addControl(this.control);\r\n      }, 1);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./map-mouse-position.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "MapPopupComponent",
            "id": "component-MapPopupComponent-5e0a856d0ae3fd7c182fe12a6c4ecf635397f0cd60b12dd0574adf34f723effca7534fe56f31c0c84e736950eaf14387fcd960bfdcd6abf1ecd8e681075d6a7b",
            "file": "src/app/components/commons/map/components/maps-popup/maps-popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-maps-popup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./maps-popup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mapView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Map",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "coordinatesSubject",
                    "defaultValue": "new BehaviorSubject<number[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentMarker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Feature",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "details$",
                    "defaultValue": "this.coordinatesSubject.pipe(\r\n    debounceTime(300),\r\n    distinctUntilChanged((prev, curr) => prev[0] === curr[0] && prev[1] === curr[1]),\r\n    switchMap(([lon, lat]) =>\r\n      this.getWeatherData(lat, lon).pipe(\r\n        map(data => (data ? this.mapToDetails(data) : [])),\r\n        catchError(() => of([{ label: 'Data unavailable', value: '' }]))\r\n      )\r\n    ),\r\n    untilDestroyed(this)\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDataDisplay[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "markerLayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VectorLayer<VectorSource>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "overlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Overlay",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "popupEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'popup'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "baseUrl",
                    "defaultValue": "`${API_URL}/weather`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "WeatherPopupService"
                    }
                },
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addOrUpdateMarker",
                    "args": [
                        {
                            "name": "coordinate",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "coordinate",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapToDetails",
                    "args": [
                        {
                            "name": "data",
                            "type": "IWeatherData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDataDisplay[]",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IWeatherData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupPopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getWeatherData",
                    "args": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lon",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lon",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "WeatherPopupService"
                    }
                },
                {
                    "name": "createUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "response",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\r\nimport { BehaviorSubject, of, Observable } from 'rxjs';\r\nimport { catchError, debounceTime, distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport Map from 'ol/Map';\r\nimport Overlay from 'ol/Overlay';\r\nimport { toLonLat } from 'ol/proj';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { Feature } from 'ol';\r\nimport { Point } from 'ol/geom';\r\nimport Style from 'ol/style/Style';\r\nimport Icon from 'ol/style/Icon';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { WeatherPopupService } from './maps-popup.service';\r\n\r\nexport interface IDataDisplay {\r\n  label?: string;\r\n  value?: string | number | null;\r\n}\r\n\r\nexport interface IWeatherData {\r\n  [name: string]: any;\r\n}\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-maps-popup',\r\n  templateUrl: './maps-popup.component.html',\r\n  styleUrl: './maps-popup.component.scss',\r\n})\r\nexport class MapPopupComponent extends WeatherPopupService implements AfterViewInit, OnDestroy {\r\n  @ViewChild('popup') popupEl: ElementRef;\r\n\r\n  @Input() mapView: Map;\r\n\r\n  private overlay: Overlay;\r\n\r\n  private markerLayer: VectorLayer<VectorSource>;\r\n\r\n  private currentMarker: Feature;\r\n\r\n  private coordinatesSubject = new BehaviorSubject<number[]>([]);\r\n\r\n  details$: Observable<IDataDisplay[]> = this.coordinatesSubject.pipe(\r\n    debounceTime(300),\r\n    distinctUntilChanged((prev, curr) => prev[0] === curr[0] && prev[1] === curr[1]),\r\n    switchMap(([lon, lat]) =>\r\n      this.getWeatherData(lat, lon).pipe(\r\n        map(data => (data ? this.mapToDetails(data) : [])),\r\n        catchError(() => of([{ label: 'Data unavailable', value: '' }]))\r\n      )\r\n    ),\r\n    untilDestroyed(this)\r\n  );\r\n\r\n  ngAfterViewInit(): void {\r\n    this.overlay = new Overlay({\r\n      element: this.popupEl.nativeElement,\r\n      offset: [0, -13],\r\n    });\r\n    this.markerLayer = new VectorLayer({\r\n      source: new VectorSource(),\r\n    });\r\n\r\n    this.mapView.addOverlay(this.overlay);\r\n    this.mapView.addLayer(this.markerLayer);\r\n    this.setupPopup();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.overlay) this.mapView.removeOverlay(this.overlay);\r\n    if (this.markerLayer) this.mapView.removeLayer(this.markerLayer);\r\n  }\r\n\r\n  setupPopup(): void {\r\n    this.mapView.on('singleclick', event => {\r\n      const { coordinate } = event;\r\n      const [lon, lat] = toLonLat(coordinate);\r\n      this.coordinatesSubject.next([lon, lat]);\r\n      this.addOrUpdateMarker(coordinate);\r\n      this.overlay.setPosition(coordinate);\r\n      const popupRect = this.popupEl.nativeElement.getBoundingClientRect();\r\n      this.overlay.setOffset([-popupRect.width / 2, -popupRect.height - 30]);\r\n    });\r\n  }\r\n\r\n  private mapToDetails(data: IWeatherData): IDataDisplay[] {\r\n    const { wind, clouds, main } = data || {};\r\n    return [\r\n      { label: 'Temperature:', value: `${Math.floor((main?.temp as number) ?? 0)}°C` },\r\n      { label: 'Wind:', value: `${Math.floor((wind?.speed as number) ?? 0)}m/s` },\r\n      { label: 'Cloud cover:', value: `${(clouds?.all as number) ?? 0}%` },\r\n      { label: 'Pressure:', value: `${(main?.pressure as number) ?? 0}hPa` },\r\n    ];\r\n  }\r\n\r\n  private addOrUpdateMarker(coordinate: number[]): void {\r\n    if (this.currentMarker) {\r\n      const currentCoord = (this.currentMarker.getGeometry() as Point).getCoordinates();\r\n      if (currentCoord[0] === coordinate[0] && currentCoord[1] === coordinate[1]) return;\r\n      this.markerLayer.getSource().removeFeature(this.currentMarker);\r\n    }\r\n\r\n    const marker = new Feature({\r\n      geometry: new Point(coordinate),\r\n    });\r\n\r\n    marker.setStyle(\r\n      new Style({\r\n        image: new Icon({\r\n          anchor: [0.5, 1],\r\n          src: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',\r\n          scale: 0.05,\r\n        }),\r\n      })\r\n    );\r\n\r\n    this.markerLayer.getSource().addFeature(marker);\r\n    this.currentMarker = marker;\r\n  }\r\n\r\n  closePopup(): void {\r\n    this.overlay.setPosition(undefined);\r\n    if (this.currentMarker) {\r\n      this.markerLayer.getSource().removeFeature(this.currentMarker);\r\n      this.currentMarker = null;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./maps-popup.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "WeatherPopupService"
            ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div #popup id=\"popup\" class=\"ol-popup\">\r\n  <app-button class=\"button-close\" [isRound]=\"true\" tooltipTitle=\"mapData.buttons.close\" (btnClick)=\"closePopup()\">\r\n    <i nz-icon nzType=\"close\"></i>\r\n  </app-button>\r\n  <div *ngIf=\"details$ | async as detailsList\">\r\n    <p *ngFor=\"let item of detailsList; trackByIndex\" class=\"text orange-text m-0\">\r\n      {{ item.label }} <span>{{ item.value }}</span>\r\n    </p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "MapScalelineComponent",
            "id": "component-MapScalelineComponent-ee2ee3d04516f514eac488519bf14e4ad4ee2825451fcf6b6706758eec508cd7795c7e52371d47cb72b057d69755823b12f3a404016c9d3db7be822acb4f4d07",
            "file": "src/app/components/commons/map/components/scaleline.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scaleline",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mapView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Map",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScaleLine",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Input, ElementRef } from '@angular/core';\r\nimport Map from 'ol/Map';\r\nimport ScaleLine from 'ol/control/ScaleLine';\r\nimport { UntilDestroy } from '@ngneat/until-destroy';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-scaleline',\r\n  template: ``,\r\n  styleUrl: './map-scaleline.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MapScalelineComponent implements OnInit {\r\n  @Input() mapView: Map;\r\n\r\n  control?: ScaleLine;\r\n\r\n  constructor(private elementRef: ElementRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.control = new ScaleLine({\r\n      bar: true,\r\n      text: true,\r\n      minWidth: 125,\r\n      target: this.elementRef.nativeElement,\r\n    });\r\n    this.mapView.addControl(this.control);\r\n  }\r\n}\r\n",
            "styleUrl": "./map-scaleline.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "MapSearchComponent",
            "id": "component-MapSearchComponent-b8fcdd84305a609a179fdb260d9aaf36312cc1a094f5ec23b6d9fee11b08df916e89222939af8b62cfcbba9625553aa16df51ec77284edc4c43451b4fb355bf1",
            "file": "src/app/components/commons/map/components/map-search/map-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map-search",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./map-search.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mapView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Map",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isSelecting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "mapSearchService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MapSearchService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "query",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "searchTerms$",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "suggestions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "getCurrentVectorImageLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "VectorImageLayer | null",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleClearInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSelectSuggestion",
                    "args": [
                        {
                            "name": "suggestion",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "suggestion",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetSearchState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport Map from 'ol/Map';\r\nimport VectorImageLayer from 'ol/layer/VectorImage';\r\nimport { Feature } from 'ol';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport { Circle as CircleGeom } from 'ol/geom';\r\nimport { Style } from 'ol/style';\r\nimport { catchError, debounceTime, of, Subject, switchMap, tap } from 'rxjs';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { Colors } from '../../map.constants';\r\nimport { styleFill, styleStroke } from '../../map.helpers';\r\nimport { MapSearchService } from './map-search.service';\r\nimport { MapService } from '../../map.service';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-map-search',\r\n  templateUrl: './map-search.component.html',\r\n  styleUrl: './map-search.component.scss',\r\n})\r\nexport class MapSearchComponent implements OnInit, OnDestroy {\r\n  @Input() mapView!: Map;\r\n\r\n  query: string = '';\r\n\r\n  suggestions: any[] = [];\r\n\r\n  loading: boolean = false;\r\n\r\n  error: string = '';\r\n\r\n  isSelecting: boolean = false;\r\n\r\n  private searchTerms$ = new Subject<string>();\r\n\r\n  constructor(\r\n    private mapService: MapService,\r\n    public mapSearchService: MapSearchService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.searchTerms$\r\n      .pipe(\r\n        debounceTime(1000),\r\n        switchMap(term =>\r\n          this.mapSearchService.getData(term).pipe(\r\n            tap(() => {\r\n              this.loading = true;\r\n            }),\r\n            catchError(() => {\r\n              this.error = 'Failed to fetch suggestions';\r\n              this.loading = false;\r\n              return of([]);\r\n            })\r\n          )\r\n        ),\r\n        tap(data => {\r\n          this.suggestions = data;\r\n          this.loading = false;\r\n        }),\r\n        untilDestroyed(this)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.resetSearchState();\r\n  }\r\n\r\n  private resetSearchState(): void {\r\n    this.query = '';\r\n    this.suggestions = [];\r\n    this.loading = false;\r\n    this.error = '';\r\n    this.mapService.searchData$.next(null);\r\n    this.getCurrentVectorImageLayer()?.getSource()?.clear();\r\n  }\r\n\r\n  getCurrentVectorImageLayer(): VectorImageLayer | null {\r\n    return (\r\n      this.mapView\r\n        .getLayers()\r\n        .getArray()\r\n        .find(layer => layer instanceof VectorImageLayer) || null\r\n    );\r\n  }\r\n\r\n  handleInputChange(event: string): void {\r\n    const input = event;\r\n    this.isSelecting = false;\r\n    this.query = input;\r\n    if (this.query.length > 2) {\r\n      this.searchTerms$.next(this.query);\r\n    } else {\r\n      this.suggestions = [];\r\n    }\r\n  }\r\n\r\n  handleSelectSuggestion(suggestion: any): void {\r\n    const { longitude, latitude } = suggestion?.properties?.coordinates || {};\r\n    const view = this.mapView.getView();\r\n    const targetCoordinates = fromLonLat([parseFloat(longitude), parseFloat(latitude)]);\r\n    const currentLayer = this.getCurrentVectorImageLayer();\r\n    const vectorSource = currentLayer?.getSource();\r\n    vectorSource?.clear();\r\n    const radius = 500;\r\n    const circleFeature = new Feature({\r\n      geometry: new CircleGeom(targetCoordinates, radius),\r\n    });\r\n    circleFeature.setStyle(\r\n      new Style({\r\n        fill: styleFill(Colors.blue, 0.1),\r\n        stroke: styleStroke(Colors.blue),\r\n      })\r\n    );\r\n    vectorSource?.addFeature(circleFeature);\r\n    view.animate({\r\n      center: targetCoordinates,\r\n      zoom: 15,\r\n      duration: 1000,\r\n      easing: t => t * (2 - t),\r\n    });\r\n\r\n    this.isSelecting = true;\r\n    this.query = suggestion.displayName;\r\n    this.mapService.searchData$.next({ longitude, latitude, city: suggestion?.properties?.name ?? '' });\r\n    this.suggestions = [];\r\n  }\r\n\r\n  handleClearInput(): void {\r\n    this.resetSearchState();\r\n  }\r\n}\r\n",
            "styleUrl": "./map-search.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mapSearchService",
                        "type": "MapSearchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapSearchService",
                        "type": "MapSearchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"map-search\">\r\n  <div class=\"input-container\">\r\n    <input\r\n      type=\"text\"\r\n      [ngModel]=\"query\"\r\n      (ngModelChange)=\"handleInputChange($event)\"\r\n      aria-label=\"dsfdsf\"\r\n      placeholder=\"Search for a city...\"\r\n    />\r\n    <app-button class=\"button-close\" [isRound]=\"true\" tooltipTitle=\"mapData.buttons.close\" (btnClick)=\"handleClearInput()\">\r\n      <i nz-icon nzType=\"close\"></i>\r\n    </app-button>\r\n  </div>\r\n  <div *ngIf=\"loading\" class=\"loading\">Loading...</div>\r\n  <div *ngIf=\"error\" class=\"error\">{{ error }}</div>\r\n\r\n  <ul *ngIf=\"suggestions?.length\" class=\"suggestions-list scroll\">\r\n    <li *ngFor=\"let suggestion of suggestions; index as i; trackByIndex\" (click)=\"handleSelectSuggestion(suggestion)\">\r\n      {{ suggestion.displayName }}\r\n    </li>\r\n  </ul>\r\n</div>\r\n"
        },
        {
            "name": "MapViewComponent",
            "id": "component-MapViewComponent-787b8b883f1d6f4e0b702e84ef8dcd28068c835a33323c3e8f4038a17077a42fa7650e9e68dad62710006187009f7b35ccf03ac5647df91f3d2b28d4eca534ba",
            "file": "src/app/components/commons/map/components/map-view.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map-view",
            "styleUrls": [],
            "styles": [
                ":host { width: 100%; height: 100%; display: block; }"
            ],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mapView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Map",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Input, ElementRef } from '@angular/core';\r\nimport Map from 'ol/Map';\r\nimport { UntilDestroy } from '@ngneat/until-destroy';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-map-view',\r\n  template: '',\r\n  styles: [':host { width: 100%; height: 100%; display: block; }'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MapViewComponent implements OnInit {\r\n  @Input() mapView: Map;\r\n\r\n  constructor(private elementRef: ElementRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.mapView.setTarget(this.elementRef.nativeElement);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { width: 100%; height: 100%; display: block; }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-06c2e10a220251492a3f6908d8d501fc803f7800f2313d761149fdc685992ab7bef83e48ecfb85826ec177859647d1aa66205c4c5e4acdde2f852ac0fc6faa04",
            "file": "src/app/components/content/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n})\nexport class NotFoundComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "templateData": "<div class=\"page-404\">\n  <h1>404</h1>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "WeatherWidgetComponent",
            "id": "component-WeatherWidgetComponent-a10f44e34c709d9e060de360dd6778862bb6d12990cac3c84f6bedd594a1371fbe29e589235e7e13ee01c470979bdc09296de375bb343e480c725b8bfb56efac",
            "file": "src/app/components/commons/weather-widget/weather-widget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-weather-widget",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./weather-widget.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "citySelectionCountdown$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "citySelectionProgress$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "refreshCountdown$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "refreshProgress$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedCities$",
                    "defaultValue": "of([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IWeatherData[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "API_KEY",
                    "defaultValue": "'ae98d58d517252f2065829367d320dbb'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "WeatherWidgetService"
                    }
                },
                {
                    "name": "API_URL",
                    "defaultValue": "'https://api.openweathermap.org/data/2.5/weather'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "WeatherWidgetService"
                    }
                },
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getRandomCities",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadWeatherData",
                    "args": [
                        {
                            "name": "cities",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IWeatherData[]>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cities",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openCity",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWeather",
                    "args": [
                        {
                            "name": "city",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IWeatherData>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "city",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "WeatherWidgetService"
                    }
                },
                {
                    "name": "createUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "response",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useFullUrl",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { combineLatest, map, Observable, of, shareReplay, switchMap, timer } from 'rxjs';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { IWeatherData } from './weather-widget.model';\r\nimport { WeatherWidgetService } from './weather-widget.service';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-weather-widget',\r\n  templateUrl: './weather-widget.component.html',\r\n  styleUrl: './weather-widget.component.scss',\r\n})\r\nexport class WeatherWidgetComponent extends WeatherWidgetService implements OnInit {\r\n  @Input() cities: string[] = [];\r\n\r\n  public selectedCities$: Observable<IWeatherData[]> = of([]);\r\n\r\n  public refreshCountdown$: Observable<number>;\r\n\r\n  public citySelectionCountdown$: Observable<number>;\r\n\r\n  public refreshProgress$: Observable<number>;\r\n\r\n  public citySelectionProgress$: Observable<number>;\r\n\r\n  ngOnInit(): void {\r\n    const refreshInterval = 10000;\r\n    const citySelectionInterval = 60000;\r\n\r\n    const refresh$ = timer(0, refreshInterval);\r\n    const citySelection$ = timer(0, citySelectionInterval).pipe(\r\n      untilDestroyed(this),\r\n      map(() => this.getRandomCities()),\r\n      shareReplay(1)\r\n    );\r\n\r\n    this.refreshCountdown$ = timer(0, 1000).pipe(\r\n      untilDestroyed(this),\r\n      map(tick => refreshInterval / 1000 - (tick % (refreshInterval / 1000)))\r\n    );\r\n\r\n    this.citySelectionCountdown$ = timer(0, 1000).pipe(\r\n      untilDestroyed(this),\r\n      map(tick => citySelectionInterval / 1000 - (tick % (citySelectionInterval / 1000)))\r\n    );\r\n\r\n    this.refreshProgress$ = this.refreshCountdown$.pipe(\r\n      untilDestroyed(this),\r\n      map(timeLeft => (timeLeft / (refreshInterval / 1000)) * 100)\r\n    );\r\n\r\n    this.citySelectionProgress$ = this.citySelectionCountdown$.pipe(\r\n      untilDestroyed(this),\r\n      map(timeLeft => (timeLeft / (citySelectionInterval / 1000)) * 100)\r\n    );\r\n\r\n    this.selectedCities$ = citySelection$.pipe(\r\n      untilDestroyed(this),\r\n      switchMap(cities => refresh$.pipe(switchMap(() => this.loadWeatherData(cities))))\r\n    );\r\n  }\r\n\r\n  loadWeatherData(cities: string[]): Observable<IWeatherData[]> {\r\n    const weatherObservables = cities.map(city => this.getWeather(city));\r\n    return combineLatest(weatherObservables);\r\n  }\r\n\r\n  getRandomCities(): string[] {\r\n    return this.cities?.length ? [...this.cities].sort(() => 0.5 - Math.random())?.slice(0, 3) : [];\r\n  }\r\n\r\n  openCity(id: number): void {\r\n    window.open(`https://openweathermap.org/city/${id}`, '_blank');\r\n  }\r\n}\r\n",
            "styleUrl": "./weather-widget.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "WeatherWidgetService"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"widget-container\">\r\n  <div class=\"progress-container\">\r\n    <div class=\"progress\">\r\n      <span class=\"title\">Next to refresh</span>\r\n      <svg viewBox=\"0 0 36 36\" class=\"circular-chart\">\r\n        <path\r\n          class=\"circle\"\r\n          [attr.stroke-dasharray]=\"(refreshProgress$ | async) + ', 100'\"\r\n          d=\"M18 2.0845\r\n             a 15.9155 15.9155 0 0 1 0 31.831\r\n             a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n        />\r\n      </svg>\r\n      <span class=\"countdown\">{{ refreshCountdown$ | async }}s</span>\r\n    </div>\r\n\r\n    <div class=\"progress\">\r\n      <span class=\"title\">Next to random city</span>\r\n      <svg viewBox=\"0 0 36 36\" class=\"circular-chart\">\r\n        <path\r\n          class=\"circle\"\r\n          [attr.stroke-dasharray]=\"(citySelectionProgress$ | async) + ', 100'\"\r\n          d=\"M18 2.0845\r\n             a 15.9155 15.9155 0 0 1 0 31.831\r\n             a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n        />\r\n      </svg>\r\n      <span class=\"countdown\">{{ citySelectionCountdown$ | async }}s</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"widget\" *ngFor=\"let city of selectedCities$ | async; trackByIndex\" (click)=\"openCity(city.id)\">\r\n    <h3 class=\"city\">{{ city.city }}</h3>\r\n    <div class=\"flex-center\"><img class=\"img-fluid\" [src]=\"city.icon\" alt=\"city.description\" /></div>\r\n\r\n    <span class=\"temperature\">{{ city.temp.toFixed(1) }}°C</span>\r\n    <span class=\"description\">{{ city.description }}</span>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-ee738499704c22d635e241718bcb9b74341f4c9eb4f8aad6d1b0d8a0a38b48a1e9ce35e1460d7dc571594f1f7803d72b8761c51be9594e1e3c8aa8e523aade2a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { CoreModule } from './core';\r\nimport { MainModule } from './components/main.module';\r\nimport { SharedModule } from './shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [BrowserModule, BrowserAnimationsModule, CoreModule, SharedModule, AppRoutingModule, MainModule],\r\n  bootstrap: [AppComponent],\r\n  exports: [],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "MainModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-161927c84f2a2e9f68a1537ac2f43d94a30cce66fe2c216f82db5c6e47de61a53f74f212c3cacc6e6cde6b27dbc31753c24dc6751bbe8a6da013fcc869711ec4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterConfigOptions, RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\nconst routerOptions: RouterConfigOptions = {\r\n  onSameUrlNavigation: 'reload',\r\n};\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, routerOptions)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-618188d7ee4e43987e331751d4e5c1188a1b5b30d4fd8d0f94cad3533c0425f5ae04ff39f5cd1e0a2c64b128d12298849d0274abd4e598408d5a52a4cf693fc2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/commons/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { ZorroAntdModule } from '@app/shared/ng-zorro-antd.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ButtonComponent } from './button.component';\r\n\r\n@NgModule({\r\n  declarations: [ButtonComponent],\r\n  imports: [CommonModule, TranslateModule, ZorroAntdModule],\r\n  exports: [ButtonComponent],\r\n})\r\nexport class ButtonModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ZorroAntdModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-774f5e012cfb0a9cb4193fa0fe9f593afbfba49e417fe78b64f1cf46ca85c057c73d593eb32f36eec308dfb644145742cfb391c6736ef4001381d996f2c79239",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Injector, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { HttpClientModule } from './http/httpclient.module';\r\nimport { TranslateCoreModule } from './translate-core.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule, TranslateCoreModule],\r\n  declarations: [],\r\n  providers: [],\r\n  exports: [HttpClientModule],\r\n})\r\nexport class CoreModule {\r\n  constructor(\r\n    private injector: Injector,\r\n    @Optional()\r\n    @SkipSelf()\r\n    parentModule: CoreModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('CoreModule is already loaded.');\r\n    }\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HttpClientModule"
                        },
                        {
                            "name": "TranslateCoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HttpClientModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectivesModule",
            "id": "module-DirectivesModule-2e59476856f07ddfa658aecd36f28ec3480bf00b6ea91baee8ebb6625d072b2a6a0509063710c9eb541e0f709b0cf83bad1b9a589297cce02a6cf2f3b6aededd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/directives/directives.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { NgForTrackByIndexDirective } from './ngFor-trackByIndex.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [NgForTrackByIndexDirective],\r\n  exports: [NgForTrackByIndexDirective],\r\n})\r\nexport class DirectivesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgForTrackByIndexDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgForTrackByIndexDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HeaderModule",
            "id": "module-HeaderModule-739a24f61e3f383611b06c25ad6a02dfea7b32aa26e78b25353fac8e2b2979b044baa61c34ef34ed36c0c0c89bab6a9c70e80c85ca9a2601431af185409d37ed",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/header/header.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@app/shared';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HeaderComponent } from './header.component';\r\n\r\n@NgModule({\r\n  declarations: [HeaderComponent],\r\n  imports: [SharedModule, RouterModule],\r\n  exports: [HeaderComponent],\r\n})\r\nexport class HeaderModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-249214be373d58d1c7a06d2d815ea91108fb45c4174fae01faad9443bbc20a2b67986230c675182a501a1a229d45a59cc02702da64efcd566d0e423d388972c6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/content/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { SharedModule } from '@app/shared';\r\nimport { WeatherWidgetModule } from '@app/components/commons/weather-widget/weather-widget.module';\r\nimport { MapModule } from '@app/components/commons/map/map.module';\r\nimport { NgApexchartsModule } from 'ng-apexcharts';\r\nimport { HomeRoutingModule } from './home-routing.module';\r\nimport { HomeComponent } from './home.component';\r\nimport { CurrentWeatherComponent } from './current-weather/current-weather.component';\r\nimport { ForecastWeatherComponent } from './forecast-weather/forecast-weather.component';\r\n\r\n@NgModule({\r\n  declarations: [HomeComponent, CurrentWeatherComponent, ForecastWeatherComponent],\r\n  imports: [SharedModule, HomeRoutingModule, TranslateModule, WeatherWidgetModule, MapModule, NgApexchartsModule],\r\n})\r\nexport class HomeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CurrentWeatherComponent"
                        },
                        {
                            "name": "ForecastWeatherComponent"
                        },
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        },
                        {
                            "name": "MapModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "WeatherWidgetModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "id": "module-HomeRoutingModule-0d5cec098f2d05b493eeda97492953df48235f3c20feb0be62be74c30fdef7dff653e6e8fb7f92e80890fe6a327df4ba42779d84b9ddd1ca19fd830fc22aa888",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/content/home/home-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TranslateResolver } from '@app/core';\r\nimport { HomeComponent } from './home.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    data: {\r\n      i18Local: 'home',\r\n    },\r\n    component: HomeComponent,\r\n    resolve: {\r\n      translate: TranslateResolver,\r\n    },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class HomeRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HttpClientModule",
            "id": "module-HttpClientModule-1375e7edc6d971c0ed052be96f5e08e92a3687b0ac692be45c84c94d6023678ab5356aa2d1969d5bf03b0ce83d8ef48babfa001b7767de389451db6af8460343",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/http/httpclient.module.ts",
            "methods": [],
            "sourceCode": "import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n  providers: [provideHttpClient(withInterceptorsFromDi())],\r\n})\r\nexport class HttpClientModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainModule",
            "id": "module-MainModule-912ab7e305599743242b597470694d1f826a005c6f9d8353fec3b6d68be5eb1a0cbdf5bd8f106d2c8d61e26e42cfdb8ca10ce5fa61bff72f3fd8b6c3ea8ffbb3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule, NgOptimizedImage } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MainComponent } from './main.component';\r\nimport { MainRoutingModule } from './main-routing.module';\r\nimport { HeaderModule } from './header/header.module';\r\nimport { NotFoundModule } from './content/not-found/not-found.module';\r\n\r\n@NgModule({\r\n  declarations: [MainComponent],\r\n  exports: [MainComponent],\r\n  imports: [CommonModule, NgOptimizedImage, MainRoutingModule, NotFoundModule, HeaderModule],\r\n  providers: [],\r\n})\r\nexport class MainModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MainComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HeaderModule"
                        },
                        {
                            "name": "MainRoutingModule"
                        },
                        {
                            "name": "NgOptimizedImage"
                        },
                        {
                            "name": "NotFoundModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MainComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainRoutingModule",
            "id": "module-MainRoutingModule-d20cf3c56a15692a540ef3a1c06e38eb8832324a74e7c66ea02fbc63bbe2f18df259341e22ed71b3c7672cea211b42ea232278ed6732cc271163babbc1ce5ecc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/home', pathMatch: 'full', data: { animation: true } },\r\n  {\r\n    path: 'home',\r\n    loadChildren: () => \"import('./content/home/home.module').then(mod => mod.HomeModule)\",\r\n    data: { animation: true },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MainRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MapModule",
            "id": "module-MapModule-97a84c4dfe65dc4c2d18c34549f5ed5366f881cacd1b417f7f19ac2f0fbe996d6a1b3504293c34ef0e744a1cb6efc74028f6524f98bd4aff4fe26fcafc15d14c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/commons/map/map.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@app/shared';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { FullscreenOverlayContainer, OverlayContainer } from '@angular/cdk/overlay';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MapComponent } from './map.component';\r\nimport { MapViewComponent } from './components/map-view.component';\r\nimport { MapScalelineComponent } from './components/scaleline.component';\r\nimport { MapMousePositionComponent } from './components/mouse-position';\r\nimport { BtnControlsComponent } from './components/btn-controls/btn-controls.component';\r\nimport { ButtonModule } from '../button/button.module';\r\nimport { MapLegendComponent } from './components/map-legend/map-legend.component';\r\nimport { MapPopupComponent } from './components/maps-popup/maps-popup.component';\r\nimport { MapSearchComponent } from './components/map-search/map-search.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MapComponent,\r\n    BtnControlsComponent,\r\n    MapViewComponent,\r\n    MapScalelineComponent,\r\n    MapMousePositionComponent,\r\n    MapLegendComponent,\r\n    MapPopupComponent,\r\n    MapSearchComponent,\r\n  ],\r\n  imports: [SharedModule, ButtonModule, FormsModule],\r\n  providers: [DecimalPipe, { provide: OverlayContainer, useClass: FullscreenOverlayContainer }],\r\n  exports: [MapComponent],\r\n})\r\nexport class MapModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BtnControlsComponent"
                        },
                        {
                            "name": "MapComponent"
                        },
                        {
                            "name": "MapLegendComponent"
                        },
                        {
                            "name": "MapMousePositionComponent"
                        },
                        {
                            "name": "MapPopupComponent"
                        },
                        {
                            "name": "MapScalelineComponent"
                        },
                        {
                            "name": "MapSearchComponent"
                        },
                        {
                            "name": "MapViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MapComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotFoundModule",
            "id": "module-NotFoundModule-3ae20c34f5416c506df48d46fdb110ef1d829caa6e976ad33a387eda123faf2852d0d72625e5122fd40764b61ece88829a4c054a531ae0487377dc5ab140f337",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/content/not-found/not-found.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { NotFoundComponent } from './not-found.component';\n\nconst COMPONENT = [NotFoundComponent];\n\n@NgModule({\n  declarations: [...COMPONENT],\n  imports: [BrowserModule, RouterModule.forChild([{ path: '**', component: NotFoundComponent }])],\n  exports: [RouterModule],\n})\nexport class NotFoundModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotFoundComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedLibraryModule",
            "id": "module-SharedLibraryModule-82101aac5f36319957b24ee17fd49ea120eb372cfeb221ecd9e2b9cf9ef3b553198897aa69de5e8c84c4e91676bad211bb4bf4379c5811ac355305b141281788",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared-library.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ZorroAntdModule } from './ng-zorro-antd.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TranslateModule, ZorroAntdModule],\r\n  exports: [CommonModule, TranslateModule, ZorroAntdModule],\r\n})\r\nexport class SharedLibraryModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ZorroAntdModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ZorroAntdModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-079305e44351c7a9e5c411b1513ece5ce0ffbf20ed764d2ae934f322836cc0cc9f4b765b3fb76b639bd0d7392e110a6c23080bc3648691b26c91f9bf0c9e59a5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { SharedLibraryModule } from './shared-library.module';\r\nimport { DirectivesModule } from './directives/directives.module';\r\n\r\n@NgModule({\r\n  imports: [SharedLibraryModule, DirectivesModule],\r\n  exports: [SharedLibraryModule, DirectivesModule],\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DirectivesModule"
                        },
                        {
                            "name": "SharedLibraryModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DirectivesModule"
                        },
                        {
                            "name": "SharedLibraryModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TranslateCoreModule",
            "id": "module-TranslateCoreModule-17b96042f615580e3b26fc5b576ef0810ebfdfd696a8f32570a6d6f0040a1ff58b0806296242c5124037483a81f7e9682d0092d2e8adf7099b379a1e63de17d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/translate-core.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { MissingTranslationHandler, TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\r\nimport { StoreRouterConnectingModule } from '@ngrx/router-store';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { LanguageEffects } from './language/store';\r\nimport * as build from '../../environments/build.json';\r\nimport { MissingTranslation } from './language/missing-translation.handler';\r\nimport { LanguageService } from './language/language.service';\r\nimport { metaReducers, reducers } from './core.state';\r\nimport { HttpClientModule } from './http/httpclient.module';\r\n\r\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\r\n  const buildJSON = build;\r\n  return new TranslateHttpLoader(http, 'assets/i18Local/', `.json?v=${new Date(buildJSON.timestamp).getTime()}`);\r\n}\r\n\r\nexport function initializeLanguageService(languageService: LanguageService) {\r\n  return (): void => {\r\n    languageService.init();\r\n  };\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StoreRouterConnectingModule.forRoot(),\r\n    StoreModule.forRoot(reducers, { metaReducers }),\r\n    StoreDevtoolsModule.instrument({\r\n      maxAge: 10,\r\n    }),\r\n    EffectsModule.forRoot([LanguageEffects]),\r\n    TranslateModule.forRoot({\r\n      missingTranslationHandler: { provide: MissingTranslationHandler, useClass: MissingTranslation },\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient],\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    LanguageService,\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: initializeLanguageService,\r\n      deps: [LanguageService],\r\n      multi: true,\r\n    },\r\n  ],\r\n  exports: [TranslateModule, HttpClientModule],\r\n})\r\nexport class TranslateCoreModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LanguageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HttpClientModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HttpClientModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WeatherWidgetModule",
            "id": "module-WeatherWidgetModule-84bd94c558a5e1717c1e4c4b89bd9c886c9d1a7355e4f2e5fdb53fb18704834c29dd6e83bbf2cfad37aafd9ec44d17239050a034fff05faaaf6d5bf9e9718404",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/commons/weather-widget/weather-widget.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@app/shared';\r\nimport { WeatherWidgetComponent } from './weather-widget.component';\r\n\r\n@NgModule({\r\n  declarations: [WeatherWidgetComponent],\r\n  imports: [SharedModule],\r\n  exports: [WeatherWidgetComponent],\r\n})\r\nexport class WeatherWidgetModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WeatherWidgetComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WeatherWidgetComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ZorroAntdModule",
            "id": "module-ZorroAntdModule-4d7fd634db30782414550a28a10d8abbf31fb9ca8522eb6b7bcee9178d9372af156a49d212dfc5ba63667820cf3e97b23e6c8917bbc4d80fa922e6c28f2294e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ng-zorro-antd.module.ts",
            "methods": [],
            "sourceCode": "import { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { NgModule } from '@angular/core';\r\nimport { IconDefinition } from '@ant-design/icons-angular';\r\nimport {\r\n  StepBackwardOutline,\r\n  CaretLeftOutline,\r\n  SettingOutline,\r\n  AccountBookFill,\r\n  AlertOutline,\r\n  AlertFill,\r\n  HomeOutline,\r\n  ZoomInOutline,\r\n  ZoomOutOutline,\r\n  PlusCircleOutline,\r\n  MinusCircleOutline,\r\n} from '@ant-design/icons-angular/icons';\r\nimport { NzButtonModule } from 'ng-zorro-antd/button';\r\nimport { NzIconModule, NZ_ICONS } from 'ng-zorro-antd/icon';\r\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\r\nimport { NzCheckboxModule } from 'ng-zorro-antd/checkbox';\r\nimport { NzRadioModule } from 'ng-zorro-antd/radio';\r\n\r\nexport const icons: IconDefinition[] = [\r\n  StepBackwardOutline,\r\n  CaretLeftOutline,\r\n  SettingOutline,\r\n  AccountBookFill,\r\n  AlertOutline,\r\n  AlertFill,\r\n  HomeOutline,\r\n  ZoomInOutline,\r\n  ZoomOutOutline,\r\n  PlusCircleOutline,\r\n  MinusCircleOutline,\r\n];\r\n\r\n@NgModule({\r\n  exports: [NzButtonModule, NzIconModule, NzToolTipModule, NzCheckboxModule, NzRadioModule, ScrollingModule],\r\n  imports: [NzIconModule.forChild(icons)],\r\n  providers: [{ provide: NZ_ICONS, useValue: icons }],\r\n})\r\nexport class ZorroAntdModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "API_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'33e67a9b2d05b12d29b27e39b1d4719a'"
            },
            {
                "name": "API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://api.openweathermap.org/data/2.5'"
            },
            {
                "name": "APP_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'test-APP'"
            },
            {
                "name": "Colors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  orange: '#eb6e4b',\r\n  blue: '#0834c4',\r\n}"
            },
            {
                "name": "COMPONENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/content/not-found/not-found.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[NotFoundComponent]"
            },
            {
                "name": "controlConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ISidebarConfig[]",
                "defaultValue": "[\r\n  {\r\n    name: BTN_HOME,\r\n    id: BTN_HOME,\r\n    tooltipTitle: HOME_TOOLTIP,\r\n    iconType: ICON_HOME,\r\n    tooltipPlacement: 'top',\r\n  },\r\n  {\r\n    name: BTN_ZOOM_IN,\r\n    id: BTN_ZOOM_IN,\r\n    tooltipTitle: ZOOM_IN_TOOLTIP,\r\n    iconType: ICON_ZOOM_IN,\r\n    tooltipPlacement: 'top',\r\n  },\r\n  {\r\n    name: BTN_ZOOM_OUT,\r\n    id: BTN_ZOOM_OUT,\r\n    tooltipTitle: ZOOM_OUT_TOOLTIP,\r\n    iconType: ICON_ZOOM_OUT,\r\n    tooltipPlacement: 'top',\r\n  },\r\n]"
            },
            {
                "name": "days",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/content/home/current-weather/current-weather.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']"
            },
            {
                "name": "DEFAULT_LANGUAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/language/language.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'en'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n\r\n  SERVER_BASE_URL: 'https://localhost:1337',\r\n\r\n  SERVER_API_URL: 'https://localhost:1337/api',\r\n}"
            },
            {
                "name": "ExpandCollapseHorizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  trigger('expandCollapseHorizontal', [\r\n    state(\r\n      'initial',\r\n      style({\r\n        opacity: '0',\r\n        padding: '0',\r\n        width: '0',\r\n        right: '0',\r\n        'transform-origin': 'center 0',\r\n      })\r\n    ),\r\n    state(\r\n      'final',\r\n      style({\r\n        opacity: '1',\r\n        'transform-origin': 'center 0',\r\n        right: '58px',\r\n      })\r\n    ),\r\n    transition('initial=>final', animate('250ms')),\r\n    transition('final=>initial', animate('250ms')),\r\n  ]),\r\n]"
            },
            {
                "name": "fadeInOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animations/animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('fadeInOut', [\r\n  transition(':enter', [style({ opacity: 0 }), animate('300ms', style({ opacity: 1 }))]),\r\n  transition(':leave', [animate('300ms', style({ opacity: 0 }))]),\r\n])"
            },
            {
                "name": "hex2rgba",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/map.helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(hex: string, alpha = 1): string => {\r\n  const tmpHex = hex.toLowerCase();\r\n  const { PRE_DATA_RGBA, ALPHA_MSG_ERR } = RgbFnStrings;\r\n\r\n  if (alpha > 1 || alpha < 0) {\r\n    throw new Error(ALPHA_MSG_ERR);\r\n  }\r\n  const red = parseInt(tmpHex?.slice(1, 3), 16);\r\n  const green = parseInt(tmpHex?.slice(3, 5), 16);\r\n  const blue = parseInt(tmpHex?.slice(5, 7), 16);\r\n\r\n  return `${PRE_DATA_RGBA}(${red},${green},${blue},${alpha})`;\r\n}"
            },
            {
                "name": "icons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ng-zorro-antd.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IconDefinition[]",
                "defaultValue": "[\r\n  StepBackwardOutline,\r\n  CaretLeftOutline,\r\n  SettingOutline,\r\n  AccountBookFill,\r\n  AlertOutline,\r\n  AlertFill,\r\n  HomeOutline,\r\n  ZoomInOutline,\r\n  ZoomOutOutline,\r\n  PlusCircleOutline,\r\n  MinusCircleOutline,\r\n]"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/language/store/language.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LanguageType",
                "defaultValue": "'en'"
            },
            {
                "name": "languageFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/language/store/language.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'language'"
            },
            {
                "name": "LegendConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/map-legend/map-legend.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\r\n  temp: {\r\n    title: 'Temperature, °C',\r\n    gradient:\r\n      'linear-gradient(to right, rgb(159, 85, 181) 0%, rgb(44, 106, 187) 8.75%, rgb(82, 139, 213) 12.5%, rgb(103, 163, 222) 18.75%, rgb(142, 202, 240) 25%, rgb(155, 213, 244) 31.25%, rgb(172, 225, 253) 37.5%, rgb(194, 234, 255) 43.75%, rgb(255, 255, 208) 50%, rgb(254, 248, 174) 56.25%, rgb(254, 232, 146) 62.5%, rgb(254, 226, 112) 68.75%, rgb(253, 212, 97) 75%, rgb(244, 168, 94) 82.5%, rgb(244, 129, 89) 87.5%, rgb(244, 104, 89) 93.75%, rgb(244, 76, 73) 100%)',\r\n    dividers: [-40, -20, 0, 20, 40],\r\n  },\r\n  pressure: {\r\n    title: 'Pressure, hPa',\r\n    gradient:\r\n      'linear-gradient(to right, rgb(0, 115, 255) 0%, rgb(0, 170, 255) 8.35059%, rgb(75, 208, 214) 24.9192%, rgb(141, 231, 199) 41.4879%, rgb(176, 247, 32) 49.7722%, rgb(240, 184, 0) 58.0565%, rgb(251, 85, 21) 74.6251%, rgb(243, 54, 59) 91.1938%, rgb(198, 0, 0) 100%)',\r\n    dividers: [950, 980, 1010, 1040, 1070],\r\n  },\r\n  wind: {\r\n    title: 'Wind speed, m/s',\r\n    gradient:\r\n      'linear-gradient(to left, rgb(158, 128, 177), rgba(116, 76, 172, 0.9), rgb(164, 123, 170), rgba(170, 128, 177, 0.84), rgba(176, 128, 177, 0.71), rgba(170, 128, 177, 0.54), rgba(170, 128, 177, 0.44), rgba(255, 255, 0, 0))',\r\n    dividers: [0, 2, 3, 6, 12, 25, 50, 100],\r\n  },\r\n  clouds: {\r\n    title: 'Clouds, %',\r\n    gradient:\r\n      'linear-gradient(to right, rgba(247, 247, 255, 0) 0%, rgba(251, 247, 255, 0) 10%, rgba(244, 248, 255, 0.1) 20%, rgba(240, 249, 255, 0.2) 30%, rgba(221, 250, 255, 0.4) 40%, rgba(224, 224, 224, 0.9) 50%, rgba(224, 224, 224, 0.76) 60%, rgba(228, 228, 228, 0.9) 70%, rgba(232, 232, 232, 0.9) 80%, rgb(214, 213, 213) 90%, rgb(210, 210, 210) 95%, rgb(183, 183, 183) 100%)',\r\n    dividers: [0, 25, 50, 75, 100],\r\n  },\r\n  precipitation: {\r\n    title: 'Precipitation, mm/h',\r\n    gradient:\r\n      'linear-gradient(to left, rgb(170, 43, 195), rgb(255, 0, 146), rgb(255, 0, 100), rgb(255, 0, 0), rgb(255, 91, 0), rgb(255, 150, 0), rgb(255, 205, 0), rgb(239, 248, 0), rgb(0, 70, 0), rgb(0, 90, 0), rgb(0, 160, 0), rgb(0, 211, 0), rgb(0, 250, 100), rgba(0, 0, 0, 0))',\r\n    dividers: [0, 0.5, 1, 2, 4, 6, 7, 10, 12, 14, 16, 24, 32, 60],\r\n  },\r\n}"
            },
            {
                "name": "MAPBOX_API_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'pk.eyJ1IjoiamFtYW43IiwiYSI6ImNqbmV0bTFrczBrZG8zcm80Y2h4ZGF1ajQifQ.8aCc8P2-eq4hqman9k0E7g'"
            },
            {
                "name": "MapConsts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  targetClassName: 'ol-map',\r\n  paddingOfCenterCluster: { padding: [30, 30, 30, 30] },\r\n  noPadding: { padding: [0, 0, 0, 0] },\r\n  tileLayerIndex: 1,\r\n}"
            },
            {
                "name": "MapsTilleLayers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    name: 'precipitation',\r\n    tile: new TileLayer({\r\n      source: new XYZ({\r\n        url: `https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=${API_KEY}`,\r\n        attributions: '&copy; <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\r\n      }),\r\n      opacity: 1,\r\n    }),\r\n  },\r\n  {\r\n    name: 'temp',\r\n    tile: new TileLayer({\r\n      source: new XYZ({\r\n        url: `https://tile.openweathermap.org/map/temp_new/{z}/{x}/{y}.png?appid=${API_KEY}`,\r\n        attributions: '&copy; <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\r\n      }),\r\n      opacity: 1,\r\n    }),\r\n  },\r\n  {\r\n    name: 'wind',\r\n    tile: new TileLayer({\r\n      source: new XYZ({\r\n        url: `https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png?appid=${API_KEY}`,\r\n        attributions: '&copy; <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\r\n      }),\r\n      opacity: 1,\r\n    }),\r\n  },\r\n  {\r\n    name: 'clouds',\r\n    tile: new TileLayer({\r\n      source: new XYZ({\r\n        url: `https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png?appid=${API_KEY}`,\r\n        attributions: '&copy; <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\r\n      }),\r\n      opacity: 1,\r\n    }),\r\n  },\r\n  {\r\n    name: 'pressure',\r\n    tile: new TileLayer({\r\n      source: new XYZ({\r\n        url: `https://tile.openweathermap.org/map/pressure_new/{z}/{x}/{y}.png?appid=${API_KEY}`,\r\n        attributions: '&copy; <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\r\n      }),\r\n      opacity: 1,\r\n    }),\r\n  },\r\n]"
            },
            {
                "name": "menuConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/menu.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): IMenuConfig[] => [\r\n  { name: 'home', title: 'menu.home.title' },\r\n  { name: 'example', title: 'menu.example.title' },\r\n  { name: 'example', title: 'menu.example.title' },\r\n  { name: 'example', title: 'menu.example.title' },\r\n  { name: 'example', title: 'menu.example.title' },\r\n]"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "[initStateFromLocalStorage]"
            },
            {
                "name": "months",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/content/home/current-weather/current-weather.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n]"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  language: languageReducer,\r\n  router: routerReducer,\r\n}"
            },
            {
                "name": "routerOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "RouterConfigOptions",
                "defaultValue": "{\r\n  onSameUrlNavigation: 'reload',\r\n}"
            },
            {
                "name": "selectLanguageState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<LanguageType>('language')"
            },
            {
                "name": "selectRouterState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<RouterReducerState<SerializedRouterStateSnapshot>>('router')"
            },
            {
                "name": "sidebarConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): ISidebarConfig[] => [\r\n  {\r\n    title: 'mapData.sidebar.controls',\r\n    type: 'button',\r\n    children: controlConfig,\r\n  },\r\n  { title: 'mapData.sidebar.weatherConditions', type: 'radio-item', typeCheckbox: 'weather', children: MapsTilleLayers },\r\n  { title: 'mapData.sidebar.styleTile', type: 'radio-item', typeCheckbox: 'tile', children: TileLayerBackground },\r\n]"
            },
            {
                "name": "styleFill",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/map.helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(color: string, transparency: number): Fill =>\r\n  new Fill({\r\n    color: hex2rgba(color, transparency),\r\n  })"
            },
            {
                "name": "styleStroke",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/map.helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(color: string, transparency = 1, width = 1): Stroke =>\r\n  new Stroke({\r\n    color: hex2rgba(color, transparency),\r\n    width,\r\n    miterLimit: 0,\r\n  })"
            },
            {
                "name": "sunsetSunrise",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(utc: number): string => new Date(utc * 1000).toLocaleTimeString().slice(0, 5)"
            },
            {
                "name": "TileLayerBackground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ISidebarConfig[]",
                "defaultValue": "[\r\n  {\r\n    value: 0,\r\n    checked: false,\r\n    name: 'OSM',\r\n    source: new OSM(),\r\n    type: 'radio-item',\r\n  },\r\n\r\n  {\r\n    value: 1,\r\n    checked: true,\r\n    name: 'Light',\r\n    source: new OSM({\r\n      url: 'https://cartodb-basemaps-1.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png',\r\n    }),\r\n    type: 'radio-item',\r\n  },\r\n  {\r\n    value: 2,\r\n    checked: false,\r\n    name: 'Dark',\r\n    source: new OSM({\r\n      url: 'https://cartodb-basemaps-1.global.ssl.fastly.net/dark_all/{z}/{x}/{y}{r}.png',\r\n    }),\r\n    type: 'radio-item',\r\n  },\r\n]"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TypeEPSG"
            },
            {
                "name": "ViewOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/map.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  center: fromLonLat([-73.935242, 40.73061]),\r\n  zoom: 7,\r\n  smoothResolutionConstraint: false,\r\n  constrainResolution: true,\r\n  showFullExtent: true,\r\n  projection: EPSG3857,\r\n  pixelRatio: 1,\r\n}"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/mouse-position.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TypeEPSG"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/mouse-position.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MapSourceClass"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonsControl"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonsControl"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MapButtonsTooltip"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MapButtonsIcons"
            }
        ],
        "functions": [
            {
                "name": "debugReducer",
                "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<AppState>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSize",
                "file": "src/app/core/http/http.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "collection",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "collection",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getStateKeys",
                "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "storageKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string[]",
                "jsdoctags": [
                    {
                        "name": "storageKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/core/translate-core.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TranslateHttpLoader",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initializeLanguageService",
                "file": "src/app/core/translate-core.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initStateFromLocalStorage",
                "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<AppState>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "languageReducer",
                "file": "src/app/core/language/store/language.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "LanguageType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "initialState"
                    },
                    {
                        "name": "action",
                        "type": "LanguageActions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "LanguageType",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "LanguageType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "initialState",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "LanguageActions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "loadInitialState",
                "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Record<string, any>"
            },
            {
                "name": "preparedHttpParamsValue",
                "file": "src/app/core/http/http.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "safelyParseJSON",
                "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "jsonString",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "jsonString",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toCamelCase",
                "file": "src/app/shared/utils/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toHttpParams",
                "file": "src/app/core/http/http.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "IParams",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "HttpParams",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "IParams",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "updateNestedState",
                "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "keys",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "keys",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "BtnTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"radio\" | \"radio-item\"",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ChartOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/components/content/home/forecast-weather/forecast-weather.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "CheckboxTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"weather\" | \"tile\"",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DocOpenTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"SHOW\" | \"ADD\" | \"EDIT\"",
                "file": "src/app/shared/types/doc-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "HttpObserveType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"body\" | \"events\" | \"response\"",
                "file": "src/app/core/http/http.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LanguageActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ActionLanguageChange",
                "file": "src/app/core/language/store/language.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "LanguageType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"pl\" | \"en\"",
                "file": "src/app/core/language/language.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TypesTooltipPlacement",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"left\" | \"right\" | \"bottom\" | \"topLeft\" | \"topRight\" | \"bottomLeft\" | \"bottomRight\" | \"leftTop\" | \"leftBottom\" | \"rightTop\" | \"rightBottom\" | Array<string>",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "ButtonsControl",
                "childs": [
                    {
                        "name": "BTN_HOME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "home"
                    },
                    {
                        "name": "BTN_ZOOM_IN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "zoom-in"
                    },
                    {
                        "name": "BTN_ZOOM_OUT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "zoom-out"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.enums.ts"
            },
            {
                "name": "LanguageActionTypes",
                "childs": [
                    {
                        "name": "CHANGE_LANGUAGE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[Language] Change Language"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/language/store/language.actions.ts"
            },
            {
                "name": "MapButtonsIcons",
                "childs": [
                    {
                        "name": "ICON_HOME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "home"
                    },
                    {
                        "name": "ICON_ZOOM_IN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "plus-circle"
                    },
                    {
                        "name": "ICON_ZOOM_OUT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "minus-circle"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.enums.ts"
            },
            {
                "name": "MapButtonsTooltip",
                "childs": [
                    {
                        "name": "HOME_TOOLTIP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "home"
                    },
                    {
                        "name": "ZOOM_IN_TOOLTIP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "zoomIn"
                    },
                    {
                        "name": "ZOOM_OUT_TOOLTIP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "zoomOut"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/commons/map/components/btn-controls/btn-controls.enums.ts"
            },
            {
                "name": "MapSourceClass",
                "childs": [
                    {
                        "name": "MOUSE_POSITION_CONTROL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "mouseposition-control"
                    },
                    {
                        "name": "NBSP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "&nbsp;"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/commons/map/map.enums.ts"
            },
            {
                "name": "RgbFnStrings",
                "childs": [
                    {
                        "name": "PRE_DATA_RGBA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rgba"
                    },
                    {
                        "name": "ALPHA_MSG_ERR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "alpha is not correct!"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/commons/map/map.enums.ts"
            },
            {
                "name": "TypeEPSG",
                "childs": [
                    {
                        "name": "EPSG4326",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EPSG:4326"
                    },
                    {
                        "name": "EPSG3857",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EPSG:3857"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/commons/map/map.enums.ts"
            }
        ],
        "groupedVariables": {
            "src/app/components/commons/map/map.constants.ts": [
                {
                    "name": "API_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'33e67a9b2d05b12d29b27e39b1d4719a'"
                },
                {
                    "name": "API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://api.openweathermap.org/data/2.5'"
                },
                {
                    "name": "Colors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  orange: '#eb6e4b',\r\n  blue: '#0834c4',\r\n}"
                },
                {
                    "name": "MAPBOX_API_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'pk.eyJ1IjoiamFtYW43IiwiYSI6ImNqbmV0bTFrczBrZG8zcm80Y2h4ZGF1ajQifQ.8aCc8P2-eq4hqman9k0E7g'"
                },
                {
                    "name": "MapConsts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  targetClassName: 'ol-map',\r\n  paddingOfCenterCluster: { padding: [30, 30, 30, 30] },\r\n  noPadding: { padding: [0, 0, 0, 0] },\r\n  tileLayerIndex: 1,\r\n}"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TypeEPSG"
                },
                {
                    "name": "ViewOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/map.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  center: fromLonLat([-73.935242, 40.73061]),\r\n  zoom: 7,\r\n  smoothResolutionConstraint: false,\r\n  constrainResolution: true,\r\n  showFullExtent: true,\r\n  projection: EPSG3857,\r\n  pixelRatio: 1,\r\n}"
                }
            ],
            "src/app/core/core.state.ts": [
                {
                    "name": "APP_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'test-APP'"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "[initStateFromLocalStorage]"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  language: languageReducer,\r\n  router: routerReducer,\r\n}"
                },
                {
                    "name": "selectLanguageState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<LanguageType>('language')"
                },
                {
                    "name": "selectRouterState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<RouterReducerState<SerializedRouterStateSnapshot>>('router')"
                }
            ],
            "src/app/components/content/not-found/not-found.module.ts": [
                {
                    "name": "COMPONENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/content/not-found/not-found.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[NotFoundComponent]"
                }
            ],
            "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts": [
                {
                    "name": "controlConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISidebarConfig[]",
                    "defaultValue": "[\r\n  {\r\n    name: BTN_HOME,\r\n    id: BTN_HOME,\r\n    tooltipTitle: HOME_TOOLTIP,\r\n    iconType: ICON_HOME,\r\n    tooltipPlacement: 'top',\r\n  },\r\n  {\r\n    name: BTN_ZOOM_IN,\r\n    id: BTN_ZOOM_IN,\r\n    tooltipTitle: ZOOM_IN_TOOLTIP,\r\n    iconType: ICON_ZOOM_IN,\r\n    tooltipPlacement: 'top',\r\n  },\r\n  {\r\n    name: BTN_ZOOM_OUT,\r\n    id: BTN_ZOOM_OUT,\r\n    tooltipTitle: ZOOM_OUT_TOOLTIP,\r\n    iconType: ICON_ZOOM_OUT,\r\n    tooltipPlacement: 'top',\r\n  },\r\n]"
                },
                {
                    "name": "MapsTilleLayers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    name: 'precipitation',\r\n    tile: new TileLayer({\r\n      source: new XYZ({\r\n        url: `https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=${API_KEY}`,\r\n        attributions: '&copy; <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\r\n      }),\r\n      opacity: 1,\r\n    }),\r\n  },\r\n  {\r\n    name: 'temp',\r\n    tile: new TileLayer({\r\n      source: new XYZ({\r\n        url: `https://tile.openweathermap.org/map/temp_new/{z}/{x}/{y}.png?appid=${API_KEY}`,\r\n        attributions: '&copy; <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\r\n      }),\r\n      opacity: 1,\r\n    }),\r\n  },\r\n  {\r\n    name: 'wind',\r\n    tile: new TileLayer({\r\n      source: new XYZ({\r\n        url: `https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png?appid=${API_KEY}`,\r\n        attributions: '&copy; <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\r\n      }),\r\n      opacity: 1,\r\n    }),\r\n  },\r\n  {\r\n    name: 'clouds',\r\n    tile: new TileLayer({\r\n      source: new XYZ({\r\n        url: `https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png?appid=${API_KEY}`,\r\n        attributions: '&copy; <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\r\n      }),\r\n      opacity: 1,\r\n    }),\r\n  },\r\n  {\r\n    name: 'pressure',\r\n    tile: new TileLayer({\r\n      source: new XYZ({\r\n        url: `https://tile.openweathermap.org/map/pressure_new/{z}/{x}/{y}.png?appid=${API_KEY}`,\r\n        attributions: '&copy; <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\r\n      }),\r\n      opacity: 1,\r\n    }),\r\n  },\r\n]"
                },
                {
                    "name": "sidebarConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): ISidebarConfig[] => [\r\n  {\r\n    title: 'mapData.sidebar.controls',\r\n    type: 'button',\r\n    children: controlConfig,\r\n  },\r\n  { title: 'mapData.sidebar.weatherConditions', type: 'radio-item', typeCheckbox: 'weather', children: MapsTilleLayers },\r\n  { title: 'mapData.sidebar.styleTile', type: 'radio-item', typeCheckbox: 'tile', children: TileLayerBackground },\r\n]"
                },
                {
                    "name": "TileLayerBackground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISidebarConfig[]",
                    "defaultValue": "[\r\n  {\r\n    value: 0,\r\n    checked: false,\r\n    name: 'OSM',\r\n    source: new OSM(),\r\n    type: 'radio-item',\r\n  },\r\n\r\n  {\r\n    value: 1,\r\n    checked: true,\r\n    name: 'Light',\r\n    source: new OSM({\r\n      url: 'https://cartodb-basemaps-1.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png',\r\n    }),\r\n    type: 'radio-item',\r\n  },\r\n  {\r\n    value: 2,\r\n    checked: false,\r\n    name: 'Dark',\r\n    source: new OSM({\r\n      url: 'https://cartodb-basemaps-1.global.ssl.fastly.net/dark_all/{z}/{x}/{y}{r}.png',\r\n    }),\r\n    type: 'radio-item',\r\n  },\r\n]"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonsControl"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MapButtonsTooltip"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MapButtonsIcons"
                }
            ],
            "src/app/components/content/home/current-weather/current-weather.constants.ts": [
                {
                    "name": "days",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/content/home/current-weather/current-weather.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']"
                },
                {
                    "name": "months",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/content/home/current-weather/current-weather.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n]"
                }
            ],
            "src/app/core/language/language.service.ts": [
                {
                    "name": "DEFAULT_LANGUAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/language/language.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'en'"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n\r\n  SERVER_BASE_URL: 'https://localhost:1337',\r\n\r\n  SERVER_API_URL: 'https://localhost:1337/api',\r\n}"
                }
            ],
            "src/app/shared/animations/animations.ts": [
                {
                    "name": "ExpandCollapseHorizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  trigger('expandCollapseHorizontal', [\r\n    state(\r\n      'initial',\r\n      style({\r\n        opacity: '0',\r\n        padding: '0',\r\n        width: '0',\r\n        right: '0',\r\n        'transform-origin': 'center 0',\r\n      })\r\n    ),\r\n    state(\r\n      'final',\r\n      style({\r\n        opacity: '1',\r\n        'transform-origin': 'center 0',\r\n        right: '58px',\r\n      })\r\n    ),\r\n    transition('initial=>final', animate('250ms')),\r\n    transition('final=>initial', animate('250ms')),\r\n  ]),\r\n]"
                },
                {
                    "name": "fadeInOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animations/animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('fadeInOut', [\r\n  transition(':enter', [style({ opacity: 0 }), animate('300ms', style({ opacity: 1 }))]),\r\n  transition(':leave', [animate('300ms', style({ opacity: 0 }))]),\r\n])"
                }
            ],
            "src/app/components/commons/map/map.helpers.ts": [
                {
                    "name": "hex2rgba",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/map.helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(hex: string, alpha = 1): string => {\r\n  const tmpHex = hex.toLowerCase();\r\n  const { PRE_DATA_RGBA, ALPHA_MSG_ERR } = RgbFnStrings;\r\n\r\n  if (alpha > 1 || alpha < 0) {\r\n    throw new Error(ALPHA_MSG_ERR);\r\n  }\r\n  const red = parseInt(tmpHex?.slice(1, 3), 16);\r\n  const green = parseInt(tmpHex?.slice(3, 5), 16);\r\n  const blue = parseInt(tmpHex?.slice(5, 7), 16);\r\n\r\n  return `${PRE_DATA_RGBA}(${red},${green},${blue},${alpha})`;\r\n}"
                },
                {
                    "name": "styleFill",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/map.helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(color: string, transparency: number): Fill =>\r\n  new Fill({\r\n    color: hex2rgba(color, transparency),\r\n  })"
                },
                {
                    "name": "styleStroke",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/map.helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(color: string, transparency = 1, width = 1): Stroke =>\r\n  new Stroke({\r\n    color: hex2rgba(color, transparency),\r\n    width,\r\n    miterLimit: 0,\r\n  })"
                }
            ],
            "src/app/shared/ng-zorro-antd.module.ts": [
                {
                    "name": "icons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ng-zorro-antd.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition[]",
                    "defaultValue": "[\r\n  StepBackwardOutline,\r\n  CaretLeftOutline,\r\n  SettingOutline,\r\n  AccountBookFill,\r\n  AlertOutline,\r\n  AlertFill,\r\n  HomeOutline,\r\n  ZoomInOutline,\r\n  ZoomOutOutline,\r\n  PlusCircleOutline,\r\n  MinusCircleOutline,\r\n]"
                }
            ],
            "src/app/core/language/store/language.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/language/store/language.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageType",
                    "defaultValue": "'en'"
                },
                {
                    "name": "languageFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/language/store/language.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'language'"
                }
            ],
            "src/app/components/commons/map/components/map-legend/map-legend.config.ts": [
                {
                    "name": "LegendConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/map-legend/map-legend.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\r\n  temp: {\r\n    title: 'Temperature, °C',\r\n    gradient:\r\n      'linear-gradient(to right, rgb(159, 85, 181) 0%, rgb(44, 106, 187) 8.75%, rgb(82, 139, 213) 12.5%, rgb(103, 163, 222) 18.75%, rgb(142, 202, 240) 25%, rgb(155, 213, 244) 31.25%, rgb(172, 225, 253) 37.5%, rgb(194, 234, 255) 43.75%, rgb(255, 255, 208) 50%, rgb(254, 248, 174) 56.25%, rgb(254, 232, 146) 62.5%, rgb(254, 226, 112) 68.75%, rgb(253, 212, 97) 75%, rgb(244, 168, 94) 82.5%, rgb(244, 129, 89) 87.5%, rgb(244, 104, 89) 93.75%, rgb(244, 76, 73) 100%)',\r\n    dividers: [-40, -20, 0, 20, 40],\r\n  },\r\n  pressure: {\r\n    title: 'Pressure, hPa',\r\n    gradient:\r\n      'linear-gradient(to right, rgb(0, 115, 255) 0%, rgb(0, 170, 255) 8.35059%, rgb(75, 208, 214) 24.9192%, rgb(141, 231, 199) 41.4879%, rgb(176, 247, 32) 49.7722%, rgb(240, 184, 0) 58.0565%, rgb(251, 85, 21) 74.6251%, rgb(243, 54, 59) 91.1938%, rgb(198, 0, 0) 100%)',\r\n    dividers: [950, 980, 1010, 1040, 1070],\r\n  },\r\n  wind: {\r\n    title: 'Wind speed, m/s',\r\n    gradient:\r\n      'linear-gradient(to left, rgb(158, 128, 177), rgba(116, 76, 172, 0.9), rgb(164, 123, 170), rgba(170, 128, 177, 0.84), rgba(176, 128, 177, 0.71), rgba(170, 128, 177, 0.54), rgba(170, 128, 177, 0.44), rgba(255, 255, 0, 0))',\r\n    dividers: [0, 2, 3, 6, 12, 25, 50, 100],\r\n  },\r\n  clouds: {\r\n    title: 'Clouds, %',\r\n    gradient:\r\n      'linear-gradient(to right, rgba(247, 247, 255, 0) 0%, rgba(251, 247, 255, 0) 10%, rgba(244, 248, 255, 0.1) 20%, rgba(240, 249, 255, 0.2) 30%, rgba(221, 250, 255, 0.4) 40%, rgba(224, 224, 224, 0.9) 50%, rgba(224, 224, 224, 0.76) 60%, rgba(228, 228, 228, 0.9) 70%, rgba(232, 232, 232, 0.9) 80%, rgb(214, 213, 213) 90%, rgb(210, 210, 210) 95%, rgb(183, 183, 183) 100%)',\r\n    dividers: [0, 25, 50, 75, 100],\r\n  },\r\n  precipitation: {\r\n    title: 'Precipitation, mm/h',\r\n    gradient:\r\n      'linear-gradient(to left, rgb(170, 43, 195), rgb(255, 0, 146), rgb(255, 0, 100), rgb(255, 0, 0), rgb(255, 91, 0), rgb(255, 150, 0), rgb(255, 205, 0), rgb(239, 248, 0), rgb(0, 70, 0), rgb(0, 90, 0), rgb(0, 160, 0), rgb(0, 211, 0), rgb(0, 250, 100), rgba(0, 0, 0, 0))',\r\n    dividers: [0, 0.5, 1, 2, 4, 6, 7, 10, 12, 14, 16, 24, 32, 60],\r\n  },\r\n}"
                }
            ],
            "src/app/components/header/menu.config.ts": [
                {
                    "name": "menuConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/menu.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): IMenuConfig[] => [\r\n  { name: 'home', title: 'menu.home.title' },\r\n  { name: 'example', title: 'menu.example.title' },\r\n  { name: 'example', title: 'menu.example.title' },\r\n  { name: 'example', title: 'menu.example.title' },\r\n  { name: 'example', title: 'menu.example.title' },\r\n]"
                }
            ],
            "src/app/app-routing.module.ts": [
                {
                    "name": "routerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterConfigOptions",
                    "defaultValue": "{\r\n  onSameUrlNavigation: 'reload',\r\n}"
                }
            ],
            "src/app/shared/utils/utils.ts": [
                {
                    "name": "sunsetSunrise",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(utc: number): string => new Date(utc * 1000).toLocaleTimeString().slice(0, 5)"
                }
            ],
            "src/app/components/commons/map/components/mouse-position.ts": [
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/mouse-position.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TypeEPSG"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/mouse-position.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MapSourceClass"
                }
            ],
            "src/app/components/commons/map/components/btn-controls/btn-controls.component.ts": [
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonsControl"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/meta-reducers/init-state-storage.reducer.ts": [
                {
                    "name": "debugReducer",
                    "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<AppState>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStateKeys",
                    "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "storageKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string[]",
                    "jsdoctags": [
                        {
                            "name": "storageKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initStateFromLocalStorage",
                    "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<AppState>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadInitialState",
                    "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Record<string, any>"
                },
                {
                    "name": "safelyParseJSON",
                    "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "jsonString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "jsonString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateNestedState",
                    "file": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keys",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/http/http.utils.ts": [
                {
                    "name": "getSize",
                    "file": "src/app/core/http/http.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "collection",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "preparedHttpParamsValue",
                    "file": "src/app/core/http/http.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toHttpParams",
                    "file": "src/app/core/http/http.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "IParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "HttpParams",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/translate-core.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/core/translate-core.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TranslateHttpLoader",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeLanguageService",
                    "file": "src/app/core/translate-core.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "languageService",
                            "type": "LanguageService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "languageService",
                            "type": "LanguageService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/language/store/language.reducer.ts": [
                {
                    "name": "languageReducer",
                    "file": "src/app/core/language/store/language.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "LanguageType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "initialState"
                        },
                        {
                            "name": "action",
                            "type": "LanguageActions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "LanguageType",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "LanguageType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "initialState",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "LanguageActions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/utils/utils.ts": [
                {
                    "name": "toCamelCase",
                    "file": "src/app/shared/utils/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/components/commons/map/components/btn-controls/btn-controls.enums.ts": [
                {
                    "name": "ButtonsControl",
                    "childs": [
                        {
                            "name": "BTN_HOME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "home"
                        },
                        {
                            "name": "BTN_ZOOM_IN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "zoom-in"
                        },
                        {
                            "name": "BTN_ZOOM_OUT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "zoom-out"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.enums.ts"
                },
                {
                    "name": "MapButtonsIcons",
                    "childs": [
                        {
                            "name": "ICON_HOME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "home"
                        },
                        {
                            "name": "ICON_ZOOM_IN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "plus-circle"
                        },
                        {
                            "name": "ICON_ZOOM_OUT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "minus-circle"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.enums.ts"
                },
                {
                    "name": "MapButtonsTooltip",
                    "childs": [
                        {
                            "name": "HOME_TOOLTIP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "home"
                        },
                        {
                            "name": "ZOOM_IN_TOOLTIP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "zoomIn"
                        },
                        {
                            "name": "ZOOM_OUT_TOOLTIP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "zoomOut"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.enums.ts"
                }
            ],
            "src/app/core/language/store/language.actions.ts": [
                {
                    "name": "LanguageActionTypes",
                    "childs": [
                        {
                            "name": "CHANGE_LANGUAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[Language] Change Language"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/language/store/language.actions.ts"
                }
            ],
            "src/app/components/commons/map/map.enums.ts": [
                {
                    "name": "MapSourceClass",
                    "childs": [
                        {
                            "name": "MOUSE_POSITION_CONTROL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "mouseposition-control"
                        },
                        {
                            "name": "NBSP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "&nbsp;"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/commons/map/map.enums.ts"
                },
                {
                    "name": "RgbFnStrings",
                    "childs": [
                        {
                            "name": "PRE_DATA_RGBA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rgba"
                        },
                        {
                            "name": "ALPHA_MSG_ERR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "alpha is not correct!"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/commons/map/map.enums.ts"
                },
                {
                    "name": "TypeEPSG",
                    "childs": [
                        {
                            "name": "EPSG4326",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EPSG:4326"
                        },
                        {
                            "name": "EPSG3857",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EPSG:3857"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/commons/map/map.enums.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts": [
                {
                    "name": "BtnTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"radio\" | \"radio-item\"",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "CheckboxTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"weather\" | \"tile\"",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TypesTooltipPlacement",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"left\" | \"right\" | \"bottom\" | \"topLeft\" | \"topRight\" | \"bottomLeft\" | \"bottomRight\" | \"leftTop\" | \"leftBottom\" | \"rightTop\" | \"rightBottom\" | Array<string>",
                    "file": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/content/home/forecast-weather/forecast-weather.component.ts": [
                {
                    "name": "ChartOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/components/content/home/forecast-weather/forecast-weather.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/shared/types/doc-types.ts": [
                {
                    "name": "DocOpenTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"SHOW\" | \"ADD\" | \"EDIT\"",
                    "file": "src/app/shared/types/doc-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/core/http/http.model.ts": [
                {
                    "name": "HttpObserveType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"body\" | \"events\" | \"response\"",
                    "file": "src/app/core/http/http.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/core/language/store/language.actions.ts": [
                {
                    "name": "LanguageActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ActionLanguageChange",
                    "file": "src/app/core/language/store/language.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/core/language/language.models.ts": [
                {
                    "name": "LanguageType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"pl\" | \"en\"",
                    "file": "src/app/core/language/language.models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/components/main-routing.module.ts",
                "module": "MainRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/home",
                        "pathMatch": "full",
                        "data": {
                            "animation": true
                        }
                    },
                    {
                        "path": "home",
                        "loadChildren": "./content/home/home.module#HomeModule",
                        "data": {
                            "animation": true
                        },
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/components/content/home/home-routing.module.ts",
                                        "module": "HomeRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "data": {
                                                    "i18Local": "home"
                                                },
                                                "component": "HomeComponent",
                                                "resolve": {
                                                    "translate": "TranslateResolver"
                                                }
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HomeModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/button/button.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IButton",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BtnControlsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "controlConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MapsTilleLayers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sidebarConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TileLayerBackground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISidebarConfig",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "BtnTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "CheckboxTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/btn-controls/btn-controls.models.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TypesTooltipPlacement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/map-legend/map-legend.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapLegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/map-legend/map-legend.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LegendConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/map-legend/map-legend.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILegend",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/map-search/map-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/map-search/map-search.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISearchData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/map-search/map-search.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MapSearchService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/map-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/maps-popup/maps-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapPopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/maps-popup/maps-popup.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDataDisplay",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/maps-popup/maps-popup.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWeatherData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/maps-popup/maps-popup.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WeatherPopupService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/mouse-position.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapMousePositionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/mouse-position.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/mouse-position.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/components/scaleline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapScalelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Colors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAPBOX_API_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MapConsts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ViewOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hex2rgba",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "styleFill",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "styleStroke",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/map/map.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MapService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/weather-widget/weather-widget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WeatherWidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/weather-widget/weather-widget.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWeatherData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/commons/weather-widget/weather-widget.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WeatherWidgetService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/current-weather/current-weather.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CurrentWeatherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/current-weather/current-weather.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "days",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/current-weather/current-weather.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "months",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/forecast-weather/forecast-weather.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForecastWeatherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/forecast-weather/forecast-weather.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ChartOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICoord",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IForecast",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWeather",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWeatherCity",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWeatherClouds",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWeatherData",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWeatherMain",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWeatherSys",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWeatherWind",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/home/home.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HomeService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content/not-found/not-found.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/menu.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/menu.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenuConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/core.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLanguageState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRouterState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/http.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/http.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpRequestOptions",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/http.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IParams",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/http.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "HttpObserveType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/http.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/http.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/http.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "preparedHttpParamsValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/http.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toHttpParams",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/language.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LanguageState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/language.models.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LanguageType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/language.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LanguageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/language.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LANGUAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/missing-translation.handler.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MissingTranslation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/store/language.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ActionLanguageChange",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/store/language.actions.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LanguageActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/store/language.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LanguageEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/store/language.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "languageReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/store/language.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/store/language.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "languageFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/language/translate.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslateResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "debugReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getStateKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initStateFromLocalStorage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "loadInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "safelyParseJSON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/meta-reducers/init-state-storage.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "updateNestedState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/translate-core.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/translate-core.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initializeLanguageService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/fake-loader.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FakeLoader",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations/animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExpandCollapseHorizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animations/animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fadeInOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/ngFor-trackByIndex.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgForTrackByIndexDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/ngFor-trackByIndex.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ng-zorro-antd.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "icons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/doc-types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "DocOpenTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toCamelCase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sunsetSunrise",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}